{"meta":{"title":"Abinnz's blog","subtitle":null,"description":null,"author":"Abinnz","url":"http://abinnz.com"},"pages":[{"title":"关于我","date":"2018-03-03T16:03:56.087Z","updated":"2018-03-03T16:03:56.087Z","comments":true,"path":"about/index.html","permalink":"http://abinnz.com/about/index.html","excerpt":"","text":"记录之旅&emsp;&emsp;写博是一个思考和沉淀的过程。&emsp;&emsp;路漫漫其修远兮，吾将上下而求索。 我的阅读 Java编程思想 （第4版） Java核心技术·卷1：基础知识（原书第9版） 写给大忙人看的Java SE 8 Spring实战（第3版） Maven实战 大型网站技术架构 Head First 设计模式（中文版） 设计模式之禅 代码整洁之道 啊哈!算法 重构 图解HTTP Soft Skills 程序员的自我修养… Greasy Fork 我的脚本"},{"title":"目录","date":"2018-03-03T11:25:08.612Z","updated":"2018-03-03T11:25:08.612Z","comments":true,"path":"categories/index.html","permalink":"http://abinnz.com/categories/index.html","excerpt":"","text":""},{"title":"标签","date":"2018-03-03T11:25:14.257Z","updated":"2018-03-03T11:25:14.257Z","comments":true,"path":"tags/index.html","permalink":"http://abinnz.com/tags/index.html","excerpt":"","text":""}],"posts":[{"title":"Sublime Text3 插件","slug":"2018-03-16-sublime-text3-packages","date":"2018-03-15T16:00:00.000Z","updated":"2018-03-17T06:27:58.173Z","comments":true,"path":"posts/2018-03-16-sublime-text3-packages/","link":"","permalink":"http://abinnz.com/posts/2018-03-16-sublime-text3-packages/","excerpt":"Sublime Text3个人比较喜欢便携版本，不过有些设定需要自己折腾。 下载地址https://www.sublimetext.com/3 设置右键https://my.oschina.net/adairs/blog/466777 安装 Package Control国内地区无法直接安装，需先设定代理或者下载安装https://packagecontrol.io/installation","text":"Sublime Text3个人比较喜欢便携版本，不过有些设定需要自己折腾。 下载地址https://www.sublimetext.com/3 设置右键https://my.oschina.net/adairs/blog/466777 安装 Package Control国内地区无法直接安装，需先设定代理或者下载安装https://packagecontrol.io/installation 默认快捷键https://github.com/jikeytang/sublime-text#default-keymap 用户设定Preferences -&gt; Settings-User 123456789101112131415&#123; &quot;http_proxy&quot; : &quot;127.0.0.1:8087&quot;, &quot;https_proxy&quot; : &quot;127.0.0.1:8087&quot;, &quot;color_scheme&quot; : &quot;Packages/Color Scheme - Default/Monokai.tmTheme&quot;, // theme &quot;draw_minimap_border&quot; : true, // 右侧缩略图边框 &quot;font_face&quot; : &quot;YaHei Consolas Hybrid&quot;, // 字体设置 &quot;font_size&quot; : 13, // 字体大小 &quot;highlight_line&quot; : true, // 当前行标亮 &quot;ignored_packages&quot; : [&quot;Toggle Css Format&quot;], // 开启vim模式 &quot;save_on_focus_lost&quot; : true, // 失去焦点后保存 &quot;auto_complete&quot; : false, // 失去焦点后保存 &quot;word_wrap&quot; : false, // 强制不换行 &quot;word_separators&quot; : &quot;./\\\\()\\&quot;&apos;:,.;&lt;&gt;~!@#$%^&amp;*|+=[]&#123;&#125;`~?&quot;, // 双击选中中划线 &quot;update_check&quot; : false // 关闭自动更新&#125; 我的插件 ConvertToUTF8: 文本字符编码检测，其它编码转换 Emmet: 快速生成HTML, CSS，默认扩展快捷为TAB SideBarEnhancements: 增强的侧边栏 HTMLBeautify: HTML, CSS美化，默认快捷键（Ctrl + Shift + Alt + F） A File Icon: 目录结构文件图标 AutoFileName: 文件路径自动提示 Markdown Preview: md文件预览 Terminal: 终端快速打开（定位文件目录或者项目目录）","categories":[{"name":"技能","slug":"技能","permalink":"http://abinnz.com/categories/技能/"}],"tags":[{"name":"Sublime Text3","slug":"Sublime-Text3","permalink":"http://abinnz.com/tags/Sublime-Text3/"}]},{"title":"2017后半年总结","slug":"2018-03-04-summary-for-half-year-of-2017","date":"2018-03-03T16:00:00.000Z","updated":"2018-03-04T04:57:11.966Z","comments":true,"path":"posts/2018-03-04-summary-for-half-year-of-2017/","link":"","permalink":"http://abinnz.com/posts/2018-03-04-summary-for-half-year-of-2017/","excerpt":"我的小总结&emsp;&emsp;今天是过完年回来的第一个周末日，其实这篇总结来得有点晚，2018年已经过了1/4，而我现在才回顾总结。2017这年，新技术层出不穷，比如AR，VR，区块链等等，这些技术目前看似离我们很远，不过未来肯定会深入我们生活的领域。作为开发者，很庆幸有很多新技术出现，但意味着技术更新迭代很快，有些技能需要我们接触学习，认知新技术的变化和冲击。这其实也是给开发者一个提示警告灯，告知我们技术服务是有周期的，未来必然是新的替代旧有的，所以自身得保持学习技术的热情。不过有一点是基础知识很重要，因为新的技术依赖底层的知识不会变。","text":"我的小总结&emsp;&emsp;今天是过完年回来的第一个周末日，其实这篇总结来得有点晚，2018年已经过了1/4，而我现在才回顾总结。2017这年，新技术层出不穷，比如AR，VR，区块链等等，这些技术目前看似离我们很远，不过未来肯定会深入我们生活的领域。作为开发者，很庆幸有很多新技术出现，但意味着技术更新迭代很快，有些技能需要我们接触学习，认知新技术的变化和冲击。这其实也是给开发者一个提示警告灯，告知我们技术服务是有周期的，未来必然是新的替代旧有的，所以自身得保持学习技术的热情。不过有一点是基础知识很重要，因为新的技术依赖底层的知识不会变。 &emsp;&emsp;工作中，开始接触大数据开发，也接手了两个大数据开发的案子。在这之前，自己对大数据的认知是以为它很难。其实，现在回头想想，还是自己有偏见的认识，大数据最后玩的依旧是SQL，难的是入门槛高，需要对大数据平台一些服务有认识。运维的工作量很多。很庆幸，运维的工作不需要我参与，所以能够专心开发应用。不过，开发工作中碰到很多坑，往往是解决了一个坑又入了另一个坑。 &emsp;&emsp;2017这年，接触了Python，并且也有一些实践工作。最初学习Python的目的是做爬虫网站数据，然后又学习了Pyspider、Flask框架，感觉自己深陷Python泥潭了。其实，Python也是相对简单，有Java/C#编程语言基础，学习更是简单。 &emsp;&emsp;2018的学习目标，学习Java8，9相关特性，Spring5，SpringBoot、Gradle、Kotlin…","categories":[{"name":"工作经历","slug":"工作经历","permalink":"http://abinnz.com/categories/工作经历/"}],"tags":[{"name":"2017","slug":"2017","permalink":"http://abinnz.com/tags/2017/"}]},{"title":"阿里云ECS部署Pyspider总结","slug":"2018-01-08-aliyun-ecs-deploy-pyspider-summary","date":"2018-01-07T16:00:00.000Z","updated":"2018-03-04T03:15:31.086Z","comments":true,"path":"posts/2018-01-08-aliyun-ecs-deploy-pyspider-summary/","link":"","permalink":"http://abinnz.com/posts/2018-01-08-aliyun-ecs-deploy-pyspider-summary/","excerpt":"一、简述最近用pyspider写了个爬虫需要部署到云服务器，所以入手了阿里云ECS，来完成最后的部署工作。当然在部署pyspider过程中，碰到些许问题，这里做些记录和总结。 二、部署工作主要用到的命令(git-bash)：1231. ssh连接服务端：ssh root@host2. 公钥copy至服务端：scp ~/.ssh/id_rsa.pub root@host ~/.ssh/authorized_keys，需要先在服务端创建~/.ssh文件夹3. 查看当前系统版本：cat /etc/redhat-release","text":"一、简述最近用pyspider写了个爬虫需要部署到云服务器，所以入手了阿里云ECS，来完成最后的部署工作。当然在部署pyspider过程中，碰到些许问题，这里做些记录和总结。 二、部署工作主要用到的命令(git-bash)：1231. ssh连接服务端：ssh root@host2. 公钥copy至服务端：scp ~/.ssh/id_rsa.pub root@host ~/.ssh/authorized_keys，需要先在服务端创建~/.ssh文件夹3. 查看当前系统版本：cat /etc/redhat-release 安装Python3，默认是Python2：1234567891. yum install wget gcc make# wget 用于下载源码包, gcc 和 make 用于编译 2. wget https://www.python.org/ftp/python/3.5.4/Python-3.5.4.tgz# [查看Python官网版本](https://www.python.org/downloads/source/)3. tar -zxvf Python-3.5.4.tgz4. cd Python-3.5.45. ./configure6. make7. make install 安装MySQL：123456789101112131415161718碰到问题最多的地方，刚开安装MySQL5.7，安装MySQL Server老是失败，后面查了资料说是Centos6.7缺少了某些依赖的支持，报错信息：--&gt; Finished Dependency ResolutionError: Package: mysql-community-server-5.7.20-1.el7.x86_64 (mysql57-community) Requires: libsasl2.so.3()(64bit)Error: Package: mysql-community-client-5.7.20-1.el7.x86_64 (mysql57-community) Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)Error: Package: mysql-community-libs-5.7.20-1.el7.x86_64 (mysql57-community) Requires: libc.so.6(GLIBC_2.14)(64bit)Error: Package: mysql-community-server-5.7.20-1.el7.x86_64 (mysql57-community) Requires: systemdError: Package: mysql-community-server-5.7.20-1.el7.x86_64 (mysql57-community) Requires: libstdc++.so.6(GLIBCXX_3.4.15)(64bit)Error: Package: mysql-community-client-5.7.20-1.el7.x86_64 (mysql57-community) Requires: libc.so.6(GLIBC_2.14)(64bit)Error: Package: mysql-community-server-5.7.20-1.el7.x86_64 (mysql57-community) Requires: libc.so.6(GLIBC_2.17)(64bit) You could try using --skip-broken to work around the problem You could try running: rpm -Va --nofiles --nodigest 所以后面重新安装了低版本的MySQL，折腾了一圈终于可以成功启动服务。MySQL创建pyspider用户命令：123CREATE USER &apos;pyspider&apos;@&apos;%&apos; IDENTIFIED BY &apos;pyspider&apos;;GRANT ALL ON *.* TO &apos;pyspider&apos;@&apos;%&apos;; # 请忽略，设置允许外网远程连接FLUSH PRIVILEGES; 创建pyspider的数据库：123create database taskdb;create database projectdb;create database resultdb; 用户权限授权：123GRANT SELECT, INSERT, UPDATE, REFERENCES, DELETE, CREATE, DROP, ALTER, INDEX, TRIGGER, CREATE VIEW, SHOW VIEW, EXECUTE, ALTER ROUTINE, CREATE ROUTINE, CREATE TEMPORARY TABLES, LOCK TABLES, EVENT ON `taskdb`.* TO &apos;pyspider&apos;@&apos;%&apos;;GRANT SELECT, INSERT, UPDATE, REFERENCES, DELETE, CREATE, DROP, ALTER, INDEX, TRIGGER, CREATE VIEW, SHOW VIEW, EXECUTE, ALTER ROUTINE, CREATE ROUTINE, CREATE TEMPORARY TABLES, LOCK TABLES, EVENT ON `projectdb`.* TO &apos;pyspider&apos;@&apos;%&apos;;GRANT SELECT, INSERT, UPDATE, REFERENCES, DELETE, CREATE, DROP, ALTER, INDEX, TRIGGER, CREATE VIEW, SHOW VIEW, EXECUTE, ALTER ROUTINE, CREATE ROUTINE, CREATE TEMPORARY TABLES, LOCK TABLES, EVENT ON `resultdb`.* TO &apos;pyspider&apos;@&apos;%&apos;; 常用状态查看命令：123# 查看所有连接：show full processlist;# 查看状态：show status|show variables# 杀死连接: kill 2246 安装redis：12345yum install redis启动服务：service redis start停止服务：service redis stop重启服务：service redis restart检查状态：service redis status 安装pyspider：1234567891011121314pip3 install pyspiderconfig.json设置：&#123; &quot;taskdb&quot;: &quot;mysql+taskdb://pyspider:pyspider@127.0.0.1:3306/taskdb&quot;, &quot;projectdb&quot;: &quot;mysql+projectdb://pyspider:pyspider@127.0.0.1:3306/projectdb&quot;, &quot;resultdb&quot;: &quot;mysql+resultdb://pyspider:pyspider@127.0.0.1:3306/resultdb&quot;, &quot;message_queue&quot;: &quot;redis://127.0.0.1:6379/db&quot;, &quot;webui&quot;: &#123; &quot;port&quot;: 5050, &quot;username&quot;: &quot;pyspider&quot;, &quot;password&quot;: &quot;pyspider&quot;, &quot;need-auth&quot;: true &#125;&#125; 创建系统pyspider用户：123456useradd -md /pyspider pyspider创建上述的配置文件config.json：vi /pyspider/config.jsonchown pyspider:pyspider config.jsonchmod 400 config.jsonvi /pyspider/pyspider_err.log # 创建log文件vi /pyspider/pyspider.log # 创建log文件 安装supervisor：12345678910yum install supervisor编辑配置信息：vi /etc/supervisord.conf[program:pyspider]command=/usr/local/bin/pyspider -c /pyspider/config.jsonautorestart=trueautostart=truelog_stdout=truelog_stderr=truestderr_logfile=/pyspider/pyspider_err.logstdout_logfile=/pyspider/pyspider.log 配置完成后，请重新启动supervisor服务：service supervisord restart启动supervisor：supervisorctl start 折腾完上述服务配置，终于启动pyspider服务 三、参考资料pyspider部署vi简易操作supervisor初体验使用 supervisor 管理进程","categories":[{"name":"应用部署","slug":"应用部署","permalink":"http://abinnz.com/categories/应用部署/"}],"tags":[{"name":"Pyspider","slug":"Pyspider","permalink":"http://abinnz.com/tags/Pyspider/"}]},{"title":"公司内网透过Cntlm代理上网","slug":"2017-12-19-cntlm-proxy-setting","date":"2017-12-18T16:00:00.000Z","updated":"2018-03-04T03:15:26.284Z","comments":true,"path":"posts/2017-12-19-cntlm-proxy-setting/","link":"","permalink":"http://abinnz.com/posts/2017-12-19-cntlm-proxy-setting/","excerpt":"一、简述在公司内网中，所有网络请求都是通过公司内部的代理服务器验证后再进行请求的，造成cmd终端无法访问网络资源。所以pip，npm，maven等等开发工具在终端下都不能正常下载外部的资源包，当初这个问题一直困扰着我，最后是使用Cntlm解决了我的问题。办法是通过Cntlm先在本地机子进行代理，再由Cntlm转发请求到内网的代理服务器。","text":"一、简述在公司内网中，所有网络请求都是通过公司内部的代理服务器验证后再进行请求的，造成cmd终端无法访问网络资源。所以pip，npm，maven等等开发工具在终端下都不能正常下载外部的资源包，当初这个问题一直困扰着我，最后是使用Cntlm解决了我的问题。办法是通过Cntlm先在本地机子进行代理，再由Cntlm转发请求到内网的代理服务器。 二、步骤 本机代理服务器的设定是自动检查设置，无法知道具体代理服务器的IP和端口，所以得找出内网的代理服务器：通过cmd命令netstat -anot获取所有连接的状况，找出内网代理服务器 下载Cntlm并安装 修改Cntlm安装目录下的cntlm.ini的设定 12345Username #内网账号Password #内网账号密码Domain #代理服务器域名Proxy #代理服务器的Host:PortListen #默认监听端口，默认3128 Cntlm安装目录下，新建start.bat 123@echo offcntlm.exe -c cntlm.ini -vpause 启动运行start.bat 设置开发工具的代理服务器：127.0.0.1:3128，具体如何设定请自行搜索查阅","categories":[{"name":"技能","slug":"技能","permalink":"http://abinnz.com/categories/技能/"}],"tags":[{"name":"Cntlm","slug":"Cntlm","permalink":"http://abinnz.com/tags/Cntlm/"}]},{"title":"Oracle 同一栏位数值相乘的解决办法","slug":"2017-12-14-oracle-single-column-product","date":"2017-12-13T16:00:00.000Z","updated":"2018-03-04T02:48:11.959Z","comments":true,"path":"posts/2017-12-14-oracle-single-column-product/","link":"","permalink":"http://abinnz.com/posts/2017-12-14-oracle-single-column-product/","excerpt":"一、简述Oracle 聚合函数有SUM, MAX, MIN, AVG之类的，唯独没有对同一栏位的值做乘积运算。所以在这里借用举例来解决我们处理乘积运算的需求，核心是借用对数函数的运算逻辑。 举例说明假设Table同一栏位数值有：0,99, 0.88, 0.90，各个数值相乘可以利用对数函数做转换： 1product = e^(ln0.99 + ln0.88 + ln0.90) = e^ln(0.99 * 0.88 * 0.90) = 0.99 * 0.88 * 0.90","text":"一、简述Oracle 聚合函数有SUM, MAX, MIN, AVG之类的，唯独没有对同一栏位的值做乘积运算。所以在这里借用举例来解决我们处理乘积运算的需求，核心是借用对数函数的运算逻辑。 举例说明假设Table同一栏位数值有：0,99, 0.88, 0.90，各个数值相乘可以利用对数函数做转换： 1product = e^(ln0.99 + ln0.88 + ln0.90) = e^ln(0.99 * 0.88 * 0.90) = 0.99 * 0.88 * 0.90 转换成SQL表示：product = EXP(SUM(LN(VAL)))这样子的SQL就能通用了吗，答案是不能的。因为上述的SQL没有针对一些特殊情况做处理，比如栏位数值为0或者为负数的情况。所以我们需要SQL对这特殊逻辑要做处理，不然数值正负有误或者SQL会报错。 对栏位数值为0的情况处理： 12EXP(SUM(LN(DECODE(VAL, 0, 1, VAL)))) * DECODE(MAX(DECODE(VAL, 0, 0, NULL)), 0, 0, 1) 对栏位数值出现负值的情况处理： 12EXP(SUM(LN(ABS(VAL))))* DECODE(MOD(SUM(DECODE(SIGN(YR), -1, 1, NULL)), 2), 0, 1, -1) 针对综合特殊情况的SQL如下： 1234567891011121314WITH SQL1 AS(SELECT LEVEL ID, TO_NUMBER(REGEXP_SUBSTR(&apos;0.99,0.88,-0.90,-1&apos;, &apos;[^,]+&apos;, 1, LEVEL)) YR FROM DUALCONNECT BY REGEXP_SUBSTR(&apos;0.99,0.88,-0.90,-1&apos;, &apos;[^,]+&apos;, 1, LEVEL) IS NOT NULL)SELECT TO_CHAR(ID) ID, YR, SIGN(YR) NEGATIVE FROM SQL1UNION ALLSELECT &apos;Total&apos; ID, EXP(SUM(LN(ABS(DECODE(YR, 0, 1, YR))))) /*解决负数相乘的情况*/ * DECODE(MOD(SUM(DECODE(SIGN(YR), -1, 1, NULL)), 2), 0, 1, -1) /*解决真数为0的情况*/ * DECODE(MAX(DECODE(YR, 0, 0, NULL)), 0, 0, 1) YR, DECODE(MOD(SUM(DECODE(SIGN(YR), -1, 1, NULL)), 2), 0, 1, -1) NEGATIVE FROM SQL1","categories":[{"name":"数据库","slug":"数据库","permalink":"http://abinnz.com/categories/数据库/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://abinnz.com/tags/Oracle/"}]},{"title":"Oracle 构造虚表方法","slug":"2017-08-20-oracle-virtual-table","date":"2017-08-19T16:00:00.000Z","updated":"2018-03-04T03:15:11.160Z","comments":true,"path":"posts/2017-08-20-oracle-virtual-table/","link":"","permalink":"http://abinnz.com/posts/2017-08-20-oracle-virtual-table/","excerpt":"一、简述有时候做一些相关报表的程序，免不了拼接业务SQL，因此涉及到表与表外连接（左连接与右连接），根据业务需求需要补全表连接资料。补全表连接资料可以有两个办法，通过程序遍历结果集做资料补全或者通过拼接SQL构造Table与其他表做左右外连接。当然这两个办法各有区别：业务复杂度高的还是建议通过程序作处理，假若是通过拼接SQL的办法，就会造成业务SQL变复杂；业务复杂度低的采用拼接SQL的办法能够快速构造出业务数据，这也未必是个坏办法。下面就总结下通过 Oracle 构造虚表的办法。","text":"一、简述有时候做一些相关报表的程序，免不了拼接业务SQL，因此涉及到表与表外连接（左连接与右连接），根据业务需求需要补全表连接资料。补全表连接资料可以有两个办法，通过程序遍历结果集做资料补全或者通过拼接SQL构造Table与其他表做左右外连接。当然这两个办法各有区别：业务复杂度高的还是建议通过程序作处理，假若是通过拼接SQL的办法，就会造成业务SQL变复杂；业务复杂度低的采用拼接SQL的办法能够快速构造出业务数据，这也未必是个坏办法。下面就总结下通过 Oracle 构造虚表的办法。 二、dual+union表构造毫无疑问，通过dual表构造虚表也是最简单暴力的办法，例如：构造单列： 1234567SELECT &apos;AA&apos; FIELD1 FROM dualUNION ALLSELECT &apos;BB&apos; FIELD1 FROM dualUNION ALLSELECT &apos;CC&apos; FIELD1 FROM dualUNION ALLSELECT &apos;DD&apos; FIELD1 FROM dual; 构造多列： 1234567SELECT &apos;AA&apos; FIELD1, &apos;AA&apos; FIELD2 FROM dualUNION ALLSELECT &apos;BB&apos; FIELD1, &apos;BB&apos; FIELD2 FROM dualUNION ALLSELECT &apos;CC&apos; FIELD1, &apos;CC&apos; FIELD2 FROM dualUNION ALLSELECT &apos;DD&apos; FIELD1, &apos;DD&apos; FIELD2 FROM dual; 上述办法特点是简单，但是一旦拼接的行数过多的话，SQL会变的冗长，也不直观。 三、REGEXP_SUBSTR函数12SELECT REGEXP_SUBSTR(&apos;AA,BB,CC,DD&apos;, &apos;[^,]+&apos;, 1, LEVEL) FIELD1 FROM dualCONNECT BY REGEXP_SUBSTR(&apos;AA,BB,CC,DD&apos;, &apos;[^,]+&apos;, 1, LEVEL) IS NOT NULL; 通过 REGEXP_SUBSTR 分割字符串，达到构造虚表的目的，特点是写法简洁，不过需要了解 REGEXP_SUBSTR 和 CONNECT BY 用法。 REGEXP_SUBSTR 用法：1REGEXP_SUBSTR(source_char, pattern [, position [, occurrence [, match_parameter ]]]) source_char: 字符串 pattern: 正则表达式 position: 从 source_char 指定坐标开始分割字符串，1为起始坐标 occurrence: 满足正则表达式的字符串第N次出现 match_parameter: 正则表达式匹配的参数有 ‘c’, ‘i’, ‘n’, ‘m’, ‘x’ CONNECT BY 用法：未完待续 四、参考资料Oracle的REGEXP_SUBSTR函数简单用法","categories":[{"name":"数据库","slug":"数据库","permalink":"http://abinnz.com/categories/数据库/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://abinnz.com/tags/Oracle/"}]},{"title":"2017前半年总结","slug":"2017-07-02-summary-for-half-year-of-2017","date":"2017-07-01T16:00:00.000Z","updated":"2018-03-04T03:27:54.710Z","comments":true,"path":"posts/2017-07-02-summary-for-half-year-of-2017/","link":"","permalink":"http://abinnz.com/posts/2017-07-02-summary-for-half-year-of-2017/","excerpt":"我的小总结&emsp;&emsp;隔了好长的一段时间没更新博客了，想记录总结的东西也很多。但是有时任务也挺多的，所以占用了大多数的时间，事后也忽略将它们写下来。所以，从今天开始逐步更新自己的博客。在工作中，我的大多数任务是根据业务需求开发报表程序，而这些报表也往往跟业务有很大的关系。这意味着对业务越熟悉的话，开发任务就更能得心应手。","text":"我的小总结&emsp;&emsp;隔了好长的一段时间没更新博客了，想记录总结的东西也很多。但是有时任务也挺多的，所以占用了大多数的时间，事后也忽略将它们写下来。所以，从今天开始逐步更新自己的博客。在工作中，我的大多数任务是根据业务需求开发报表程序，而这些报表也往往跟业务有很大的关系。这意味着对业务越熟悉的话，开发任务就更能得心应手。 &emsp;&emsp;关于技术成长和业务理解这两个问题，入职之初跟部门的前辈讨教过，当时不是很明白前辈的谈话，现在回想当时也是后知后觉。刚开始技术成长很快，熟悉一些常见的技术应用场景，在工作过程中逐渐理解一些业务。对我们而言，首要开发任务是满足业务需求，我们的关注点是数据层面，如何获取业务数据，如何处理业务数据；再其次是对业务涉及内容的理解。这个状况恐怕是很多码农面临的问题，前期技术成长很快，后期技术成长相对缓慢，工作重点也转移到业务层面。所以这就是我深有体会的地方，我们得时刻保持学习的状态，在工作之外抽出更多的时间学习新技术，努力让自己的技术能力有更进一步的提升。","categories":[{"name":"工作经历","slug":"工作经历","permalink":"http://abinnz.com/categories/工作经历/"}],"tags":[{"name":"2017","slug":"2017","permalink":"http://abinnz.com/tags/2017/"}]},{"title":"class.getResource和ClassLoader.getResource的区别和分析","slug":"2017-03-15-difference-between-class-getresource-and-classloader-getresource","date":"2017-03-14T16:00:00.000Z","updated":"2018-03-04T03:13:27.210Z","comments":true,"path":"posts/2017-03-15-difference-between-class-getresource-and-classloader-getresource/","link":"","permalink":"http://abinnz.com/posts/2017-03-15-difference-between-class-getresource-and-classloader-getresource/","excerpt":"前言&emsp;&emsp;在项目中通过Java的Api获取资源的场景各种各样，总会离不开获取项目的配置文件，而class.getResource和ClassLoader.getResource作为获取资源的常用手段，所以对它们需要有一定的了解，才能正确运用它们。 class.getResource和ClassLoader.getResource&emsp;&emsp;前者通过调用后者的Api来获取资源，搜索路径则由父级ClassLoader决定，通过Javadoc得知： 12class.getResource查找与给定类相关的资源的规则是通过定义类的 ClassLoader 实现的。 ClassLoader.getResource首先搜索资源的父类加载器；如果父类加载器为 null，则搜索的路径就是虚拟机的内置类加载器的路径。如果搜索失败，则此方法将调用 findResource(String) 来查找资源。","text":"前言&emsp;&emsp;在项目中通过Java的Api获取资源的场景各种各样，总会离不开获取项目的配置文件，而class.getResource和ClassLoader.getResource作为获取资源的常用手段，所以对它们需要有一定的了解，才能正确运用它们。 class.getResource和ClassLoader.getResource&emsp;&emsp;前者通过调用后者的Api来获取资源，搜索路径则由父级ClassLoader决定，通过Javadoc得知： 12class.getResource查找与给定类相关的资源的规则是通过定义类的 ClassLoader 实现的。 ClassLoader.getResource首先搜索资源的父类加载器；如果父类加载器为 null，则搜索的路径就是虚拟机的内置类加载器的路径。如果搜索失败，则此方法将调用 findResource(String) 来查找资源。 class.getResource：父类加载器是App ClassLoader class.getResource(“bar.txt”)：获取的资源是该类的包路径下的bar.txt class.getResource(“/bar.txt”)：获取的资源是classpath根路径下的bar.txt ClassLoader.getResource： ClassLoader.getResource(“bar.txt”)：获取的资源是classpath根路径下的bar.txt ClassLoader.getResource(“/bar.txt”)：获取的资源为null值，这是因为ClassLoader的父加载器为Boot ClassLoader，这个类加载器是最底层的加载器，所以加载路径为null 通过getResource的源代码： 12345678910111213141516171819202122232425262728293031323334353637383940 public java.net.URL getResource(String name) &#123; //解析传入的参数 name = resolveName(name); ClassLoader cl = getClassLoader0(); if (cl==null) &#123; // A system class. return ClassLoader.getSystemResource(name); &#125; return cl.getResource(name); &#125;//getResource的关键点是在于传入的参数，先通过resolveName解析处理参数private String resolveName(String name) &#123; if (name == null) &#123; return name; &#125; if (!name.startsWith(&quot;/&quot;)) &#123; Class c = this; while (c.isArray()) &#123; c = c.getComponentType(); &#125; String baseName = c.getName(); int index = baseName.lastIndexOf(&apos;.&apos;); if (index != -1) &#123; //class.getResource获取类包路径 name = baseName.substring(0, index).replace(&apos;.&apos;, &apos;/&apos;) +&quot;/&quot;+name; &#125; &#125; else &#123; //如果是以&quot;/&quot;开头，则去掉 name = name.substring(1); &#125; return name; &#125; 所以无论是使用class.getResource还是ClassLoader.getResource，需要注意传入参数是否以”/“开头，确保资源能正确被获取。 其它路径123456//返回当前运行Java Application路径System.getProperty(&quot;user.dir&quot;);//返回用户根目录路径System.getProperty(&quot;user.home&quot;);//获取jar包或者classes根目录所在路径：类似/xx/.../xx.jar或者/xx/.../classesclass.getProtectionDomain().getCodeSource().getLocation(); 参考资料 深入分析Java ClassLoader原理 Class.getResource和ClassLoader.getResource的区别分析 Different ways of loading a file as an InputStream","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://abinnz.com/categories/编程语言/"}],"tags":[{"name":"Java","slug":"Java","permalink":"http://abinnz.com/tags/Java/"}]},{"title":"div水平垂直居中","slug":"2016-12-04-css-div-center-layout","date":"2016-12-03T16:00:00.000Z","updated":"2018-03-04T02:50:59.358Z","comments":true,"path":"posts/2016-12-04-css-div-center-layout/","link":"","permalink":"http://abinnz.com/posts/2016-12-04-css-div-center-layout/","excerpt":"前言&emsp;&emsp;作为后端的一员，虽然不用写一些复杂的css，但是一些简单的div布局还是有必要了解的。下面就总结一些div居中布局，参考资料(CSS布局之-水平垂直居中)： 1. text-align、height-line&emsp;&emsp;使用text-align，height-line实现div内部文字的水平垂直居中，局限就是div内部需是单行文字。","text":"前言&emsp;&emsp;作为后端的一员，虽然不用写一些复杂的css，但是一些简单的div布局还是有必要了解的。下面就总结一些div居中布局，参考资料(CSS布局之-水平垂直居中)： 1. text-align、height-line&emsp;&emsp;使用text-align，height-line实现div内部文字的水平垂直居中，局限就是div内部需是单行文字。 12345678/*text-align、height-line*/.wrap&#123; text-align:center; line-height: 100px; height: 100px; background-color:#ccc;&#125;&lt;div class=&quot;wrap&quot;&gt;水平居中的文字&lt;/div&gt; 水平垂直居中的文字 2. fit-content(自动计算文字的宽度)&emsp;&emsp;使用css3的属性fit-content，div自动包裹并适配文字的宽度，缺陷就是低版本IE不能够很好兼容。 12345678910/*css3 fit-content*/.fit-content-box&#123; background-color: #ccc; width: fit-content; width: -webkit-fit-content; margin-left: auto; margin-right: auto; line-height: 25px;&#125;&lt;div class=&quot;fit-content-box&quot;&gt;水平居中的文字水平居中的文字&lt;br&gt;水平居中的文字&lt;br&gt;&lt;/div&gt; 水平居中的文字水平居中的文字水平居中的文字 3. padding填充&emsp;&emsp;通过padding填充实现div的居中，外部div固定长度和100%宽度： padding填充(外部div 固定宽度) 1234567891011121314151617181920/*padding填充(外部div 固定宽度)*/.box1&#123; margin-left: auto; margin-right: auto; width: 200px; height: 200px; background-color: #ccc;&#125;.padding-box&#123; width: 200px; height: 200px; padding: 100px; background-color: #888; background-clip: content-box; /*背景颜色只裁剪到内容区*/ text-align: center; line-height: 200px;&#125; &lt;div class=&quot;box1&quot;&gt; &lt;div class=&quot;padding-box&quot;&gt;水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字 padding填充(外部div 100%宽度) 123456789101112131415161718192021/*padding填充(外部div 100%宽度)*/.max-width-box2&#123; width: 100%; height: 400px; background-color: #ccc;&#125;.auto-padding-box&#123; width: 200px; height: 200px; padding-top: 100px; background-color: #888; background-clip: content-box; position: relative; /*相对标准流位置*/ right: 100px; padding-left: 50%; text-align: center; line-height: 200px;&#125;&lt;div class=&quot;max-width-box2&quot;&gt; &lt;div class=&quot;auto-padding-box&quot;&gt;水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字 4. margin填充&emsp;&emsp;通过margin填充实现div的居中，外部div固定长度和100%宽度： margin填充(外部div 固定宽度) 1234567891011121314151617181920/*margin填充(外部div 固定宽度)*/.box3&#123; margin-left: auto; margin-right: auto; width: 400px; height: 400px; background-color: #ccc; overflow: hidden; /*内部div内容溢出隐藏*/&#125;.margin-box&#123; width: 200px; height: 200px; background-color: #888; margin: 100px; text-align: center; line-height: 200px;&#125;&lt;div class=&quot;box3&quot;&gt; &lt;div class=&quot;margin-box&quot;&gt;水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字 margin填充(外部div 100%宽度) 1234567891011121314151617181920/*margin填充(外部div 100%宽度)*/.max-width-box4&#123; width: 100%; height: 400px; background-color: #ccc; overflow: hidden;&#125;.auto-margin-box&#123; width: 200px; height: 200px; margin-left: auto; margin-right: auto; margin-top: 100px; background-color: #888; text-align: center; line-height: 200px;&#125;&lt;div class=&quot;max-width-box4&quot;&gt; &lt;div class=&quot;auto-margin-box&quot;&gt;水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字 5. absolute定位&emsp;&emsp;通过内部元素的absolute定位，实现div元素的偏移，达到居中。 absolute布局(left、top偏移50% - 自身宽度50%) 1234567891011121314151617181920/*absolute布局(left、top偏移50% - 自身宽度50%)*/.wrap-box1&#123; width: 100%; height: 400px; background-color: #ccc; position: relative;&#125;.absolute-box1&#123; width: 200px; height: 200px; background-color: #888; position: absolute; left: 50%; top: 50%; margin-left: -100px; margin-top: -100px;&#125;&lt;div class=&quot;wrap-box1&quot;&gt; &lt;div class=&quot;absolute-box1&quot;&gt;水平居中的文字水平居中的文字水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字水平居中的文字水平居中的文字 absolute布局(transform) 123456789101112131415161718/*absolute布局(transform)*/.wrap-box1&#123; width: 100%; height: 400px; background-color: #ccc; position: relative;&#125;.translate-box2&#123; background-color: #888; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); -webkit-transform: translate(-50%, -50%);&#125;&lt;div class=&quot;wrap-box1&quot;&gt; &lt;div class=&quot;translate-box2&quot;&gt;水平居中的文字水平居中的文字水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字水平居中的文字水平居中的文字 absolute布局(三个div,通过top、left两次50%偏移) 123456789101112131415161718192021/*absolute布局(三个div,通过top、left两次50%偏移)*/.wrap-box2&#123; width: 200px; height: 200px; position: relative; top: 50%; left: 50%;&#125;.wrap-box2&gt;.inner&#123; background-color: #888; position: relative; width: 100%; height: 100%; top: -50%; left: -50%;&#125;&lt;div class=&quot;wrap-box1&quot;&gt; &lt;div class=&quot;wrap-box2&quot;&gt; &lt;div class=&quot;inner&quot;&gt;水平居中的文字水平居中的文字水平居中的文字&lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 水平居中的文字水平居中的文字水平居中的文字 absolute布局(text-align:center) 123456789101112131415161718/*text-align:center + absolute*/.text-align-box&#123; background-color: #ccc; height: 400px; text-align: center;&#125;.text-align-box&gt;.inner&#123; background-color: #888; height: 200px; width: 200px; position: absolute; display: inline-block; margin-top: 100px; margin-left: -100px;&#125;&lt;div class=&quot;text-align-box&quot;&gt; &lt;div class=&quot;inner&quot;&gt;水平居中的文字水平居中的文字水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字水平居中的文字水平居中的文字 absolute布局(margin:auto) 123456789101112131415161718192021/*absolute布局(margin:auto)*/.wrap-box3&#123; background-color: #ccc; width: 100%; height: 400px; position: relative;&#125;.wrap-box3&gt;.inner&#123; background-color: #888; width: 200px; height: 200px; position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; margin: auto;&#125;&lt;div class=&quot;wrap-box3&quot;&gt; &lt;div class=&quot;inner&quot;&gt;水平居中的文字水平居中的文字水平居中的文字&lt;/div&gt;&lt;/div&gt; 水平居中的文字水平居中的文字水平居中的文字 6. table布局&emsp;&emsp;通过table特有属性display: table，display: table-cell，display: inline-block，达到居中的效果。 123456789101112131415161718192021222324/*table布局*/.table-box&#123; width: 100%; height: 400px; background-color: #ccc; display: table;&#125;.table-cell-box&#123; text-align: center; vertical-align: middle; display: table-cell;&#125;.table-cell-box&gt;.innner&#123; background-color: #888; display: inline-block;&#125;&lt;div class=&quot;table-box&quot;&gt; &lt;div class=&quot;table-cell-box&quot;&gt; &lt;div class=&quot;innner&quot;&gt; 水平居中的文字水平居中的文字水平居中的文字&lt;br&gt; 水平居中的文字水平居中的文字水平居中的文字 &lt;/div&gt; &lt;/div&gt;&lt;/div&gt; 水平居中的文字水平居中的文字水平居中的文字 水平居中的文字水平居中的文字水平居中的文字 /*text-align、height-line*/ .wrap{ text-align:center; line-height: 100px; height: 100px; background-color:#ccc; } /*css3 fit-content*/ .fit-content-box{ background-color: #ccc; width: fit-content; width: -webkit-fit-content; margin-left: auto; margin-right: auto; line-height: 25px; } /*padding填充(外部div 固定宽度)*/ .box1{ margin-left: auto; margin-right: auto; width: 400px; height: 399px; background-color: #ccc; } .padding-box{ width: 200px; height: 200px; padding: 100px; background-color: #888; background-clip: content-box; /*背景颜色只裁剪到内容区*/ text-align: center; line-height: 200px; } /*padding填充(外部div 100%宽度)*/ .max-width-box2{ width: 100%; height: 400px; background-color: #ccc; } .auto-padding-box{ width: 200px; height: 200px; padding-top: 100px; background-color: #888; background-clip: content-box; position: relative; /*相对标准流位置*/ right: 100px; padding-left: 50%; text-align: center; line-height: 200px; } /*margin填充(外部div 固定宽度)*/ .box3{ margin-left: auto; margin-right: auto; width: 400px; height: 400px; background-color: #ccc; overflow: hidden; /*内部div内容溢出隐藏*/ } .margin-box{ width: 200px; height: 200px; background-color: #888; margin: 100px; text-align: center; line-height: 200px; } /*margin填充(外部div 100%宽度)*/ .max-width-box4{ width: 100%; height: 400px; background-color: #ccc; overflow: hidden; } .auto-margin-box{ width: 200px; height: 200px; margin-left: auto; margin-right: auto; margin-top: 100px; background-color: #888; text-align: center; line-height: 200px; } /*absolute布局(left、top偏移50% - 自身宽度50%)*/ .wrap-box1{ width: 100%; height: 400px; background-color: #ccc; position: relative; } .absolute-box1{ width: 200px; height: 200px; background-color: #888; position: absolute; left: 50%; top: 50%; margin-left: -100px; margin-top: -100px; } /*absolute布局(transform)*/ .translate-box2{ background-color: #888; position: absolute; top: 50%; left: 50%; transform: translate(-50%, -50%); -webkit-transform: translate(-50%, -50%); } /*absolute布局(三个div,通过top、left两次50%偏移)*/ .wrap-box2{ width: 200px; height: 200px; position: relative; top: 50%; left: 50%; } .wrap-box2>.inner{ background-color: #888; position: relative; width: 100%; height: 100%; top: -50%; left: -50%; } /*text-align:center + absolute*/ .text-align-box{ background-color: #ccc; height: 400px; text-align: center; } .text-align-box>.inner{ background-color: #888; height: 200px; width: 200px; position: absolute; display: inline-block; margin-top: 100px; margin-left: -100px; } /*table布局*/ .table-box{ width: 100%; height: 400px; background-color: #ccc; display: table; } .table-cell-box{ text-align: center; vertical-align: middle; display: table-cell; } .table-cell-box>.innner{ background-color: #888; display: inline-block; } /*absolute布局(margin:auto)*/ .wrap-box3{ background-color: #ccc; width: 100%; height: 400px; position: relative; } .wrap-box3>.inner{ background-color: #888; width: 200px; height: 200px; position: absolute; left: 0px; right: 0px; top: 0px; bottom: 0px; margin: auto; }","categories":[{"name":"前端","slug":"前端","permalink":"http://abinnz.com/categories/前端/"}],"tags":[{"name":"CSS","slug":"CSS","permalink":"http://abinnz.com/tags/CSS/"}]},{"title":"我的项目经验总结","slug":"2016-11-23-project-summary","date":"2016-11-22T16:00:00.000Z","updated":"2018-03-04T03:33:08.297Z","comments":true,"path":"posts/2016-11-23-project-summary/","link":"","permalink":"http://abinnz.com/posts/2016-11-23-project-summary/","excerpt":"我的总结&emsp;&emsp;老大布置的新项目是由我和另一名小伙伴合作完成的，历经整整两个多月的时间，项目也即将上线。之前本想计划着项目一上线，就总结项目过程的心坎经历，但是最后还是等不及了，想尽快记录自己的心得体会。 &emsp;&emsp;最开始，老大说公司要求做某某系统，需求这方面是老大与公司相关人员探讨的。谈需求这一阶段我和小伙伴也就没参与，但是最终确认的需求必须是我们明确知道的。因为涉及的需求任务将会由我和小伙伴去开发完成。将近约两个多星期的时间，一些需求逐步明确，与此我和另一名小伙伴也开始着手制作系统的页面原型。作为后端的我们，首选Bootstrap作为制作系统页面的框架。我们套用后台模板，选定Bootstrap特定主题，很快完成系统页面的原型。页面的元素无非就是一些表单，表格，图表之类的，并且适当考虑页面元素的布局。","text":"我的总结&emsp;&emsp;老大布置的新项目是由我和另一名小伙伴合作完成的，历经整整两个多月的时间，项目也即将上线。之前本想计划着项目一上线，就总结项目过程的心坎经历，但是最后还是等不及了，想尽快记录自己的心得体会。 &emsp;&emsp;最开始，老大说公司要求做某某系统，需求这方面是老大与公司相关人员探讨的。谈需求这一阶段我和小伙伴也就没参与，但是最终确认的需求必须是我们明确知道的。因为涉及的需求任务将会由我和小伙伴去开发完成。将近约两个多星期的时间，一些需求逐步明确，与此我和另一名小伙伴也开始着手制作系统的页面原型。作为后端的我们，首选Bootstrap作为制作系统页面的框架。我们套用后台模板，选定Bootstrap特定主题，很快完成系统页面的原型。页面的元素无非就是一些表单，表格，图表之类的，并且适当考虑页面元素的布局。 &emsp;&emsp;我们做完的系统页面原型，还需经过老大的审核。反反复复几次修改后，终于敲定系统的页面原型。其实我们心里都明白没有一成不变的需求，说不定说改就改。从页面上大致能看出整个系统的功能轮廓，也知道哪块的难易程度。对于一些技术难点，我们也开始着手查找解决方案，优先挑选一些轮子供项目使用。 &emsp;&emsp;接下来，我们开始建数据库模型，根据系统的需求确定系统需要的表和字段，以及字段需要的约束。当然，同样需要让老大审核，确保没有遗漏以及建表合理。对于建表其实需要久经设计数据库表的功底，考虑多方面的因素，满足当前需求并且与系统需求契合。对于这一方面的设计，我可能比较薄弱，考虑的也不是很全面，需要未来很长一段时间来琢磨和弥补。 &emsp;&emsp;设计完数据库表，小伙伴也开始建表及创建系统实体。而我开始搭建系统的架构，设定各个模块界限并记录开发须知便于团队合作。系统整个架构关键点在于清晰划分各个模块功能，以及其它资源的存放。同时，依据前期讨论的技术框架进行整合，并且保证最小系统能正常运行。初期系统的构建也就到此结束了。 &emsp;&emsp;下一步，就是我们正式开始编程实现的阶段。整个实现的过程是自底向上的，依序Model -&gt; Dao -&gt; Service。每一步我们都进行单元测试，确保各个函数单元正确运行。单元测试给人有点“磨刀不误砍柴工”的意思，就是不要嫌弃麻烦，这也是系统确保稳定运行的前提。在编程实现的阶段，少不了碰上一些大大小小的问题。当然，我认为如何快速解决问题更是一种能力，通过有效的配合Google+StackFlow，以此决解遇到的问题。在这个阶段，我们依据功能开发计划表按部就班，进行系统功能开发。最后，是进行系统整合测试，这里“最后”似乎有点不严谨。其实我们是逐步完成各个模块功能，所以整合测试是穿插在整个编程实现过程的。 &emsp;&emsp;我们完成功能开发后，开始对系统进行功能演示。这个阶段就是针对系统功能的评估以及提出改进建议。然后我们再根据会议提出的建议对系统进行改进。经过几次改进后，系统的第一个正式版本就此诞生了。后面，我们也针对不同角色写用户使用教程，以便于用户须知。 &emsp;&emsp;最后一步，就是等待项目的上线……","categories":[{"name":"工作经历","slug":"工作经历","permalink":"http://abinnz.com/categories/工作经历/"}],"tags":[{"name":"总结","slug":"总结","permalink":"http://abinnz.com/tags/总结/"}]},{"title":"手动安装MySQL服务","slug":"2016-11-09-manually-install-mysql-services","date":"2016-11-08T16:00:00.000Z","updated":"2018-03-04T03:12:58.038Z","comments":true,"path":"posts/2016-11-09-manually-install-mysql-services/","link":"","permalink":"http://abinnz.com/posts/2016-11-09-manually-install-mysql-services/","excerpt":"前言&emsp;&emsp;最近重装了系统，所以有很多软件不得不重装，这也是我最怕的事情。这次恰巧得使用MySQL，最坏的打算就是重装MySQL，不过还是试着有没有其他的解决办法。 解决办法 修改my.ini 在MySQL安装目录下找到my.ini进行编辑，使用#注释basedir、datadir","text":"前言&emsp;&emsp;最近重装了系统，所以有很多软件不得不重装，这也是我最怕的事情。这次恰巧得使用MySQL，最坏的打算就是重装MySQL，不过还是试着有没有其他的解决办法。 解决办法 修改my.ini 在MySQL安装目录下找到my.ini进行编辑，使用#注释basedir、datadir cmd管理员权限打开 安装mysql服务 cmd定位到MySQL安装目录bin文件夹下，执行以下命令 1mysqld --install mysql --defaults-file=&quot;D:\\Program Files\\MySQL\\MySQL Server 5.5\\my.ini&quot; 启动mysql服务 1net start mysql 配置MySQL系统环境变量 mysql命令测试 删除匿名登陆MySQL默认是开启匿名登陆(输入mysql能直接登陆)，可以依照下列步骤进行删除：12345678910# root登陆mysql -u root -p# 查看默认数据库show databases;# 使用mysql数据库use mysql;# 查看user表中用户名为空的记录数select count(*) from user where user=&apos;&apos;;# 删除user表中的匿名用户delete from user where user=&apos;&apos;;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://abinnz.com/categories/数据库/"}],"tags":[{"name":"MySQL","slug":"MySQL","permalink":"http://abinnz.com/tags/MySQL/"}]},{"title":"解决Maven使用代理连接问题","slug":"2016-11-03-resolve-maven-proxy-problem","date":"2016-11-02T16:00:00.000Z","updated":"2018-03-04T03:19:55.507Z","comments":true,"path":"posts/2016-11-03-resolve-maven-proxy-problem/","link":"","permalink":"http://abinnz.com/posts/2016-11-03-resolve-maven-proxy-problem/","excerpt":"前言&emsp;&emsp;在国内使用Maven下载远程仓库jar包，速度真是不太理想，慢的真心无法忍受。所以，最好的解决办法是通过Maven设置代理(使用XX-Net翻墙)或者Maven使用代理。 Maven设置代理 编辑 ${user.home}/.m2/settings.xml 文件，如果该目录下没有该文件，复制 $MAVEN_HOME/conf/setting.xml","text":"前言&emsp;&emsp;在国内使用Maven下载远程仓库jar包，速度真是不太理想，慢的真心无法忍受。所以，最好的解决办法是通过Maven设置代理(使用XX-Net翻墙)或者Maven使用代理。 Maven设置代理 编辑 ${user.home}/.m2/settings.xml 文件，如果该目录下没有该文件，复制 $MAVEN_HOME/conf/setting.xml 找到&lt;proxies&gt;节点，设置代理信息 1234567&lt;proxy&gt; &lt;id&gt;xx-net&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;host&gt;127.0.0.1&lt;/host&gt; &lt;port&gt;8087&lt;/port&gt;&lt;/proxy&gt; 完成上述配置，仍然还是会有问题 1[ERROR] Failed to execute goal on project xiaov: Could not resolve dependencies for project org.b3log:xiaov:war:2.2.0: Failed to collect dependencies at org.b3log:latke:jar:2.3.5 -&gt; com.alibaba:druid:jar:1.0.16: Failed to read artifact descriptor for com.alibaba:druid:jar:1.0.16: Could not transfer artifact com.alibaba:druid:pom:1.0.16 from/to central (https://repo.maven.apache.org/maven2): sun.security.validator.ValidatorException: PKIX path building failed: sun.security.provider.certpath.SunCertPathBuilderException: unable to find valid certification path to requested target -&gt; [Help 1] 原因就是Maven走的是https，使用代理连接才会出现上述SSL认证问题。更多解决办法：点击查看，推荐使用下面的解决办法。 最简洁的Maven配置请将下述配置信息覆盖settings.xml 12345678910111213141516171819202122232425262728293031323334353637383940&lt;?xml version=&quot;1.0&quot; encoding=&quot;UTF-8&quot;?&gt;&lt;settings xmlns=&quot;http://maven.apache.org/SETTINGS/1.0.0&quot; xmlns:xsi=&quot;http://www.w3.org/2001/XMLSchema-instance&quot; xsi:schemaLocation=&quot;http://maven.apache.org/SETTINGS/1.0.0 http://maven.apache.org/xsd/settings-1.0.0.xsd&quot;&gt; &lt;proxies&gt; &lt;proxy&gt; &lt;id&gt;xx-net&lt;/id&gt; &lt;active&gt;true&lt;/active&gt; &lt;protocol&gt;http&lt;/protocol&gt; &lt;host&gt;127.0.0.1&lt;/host&gt; &lt;port&gt;8087&lt;/port&gt; &lt;/proxy&gt; &lt;/proxies&gt; &lt;profiles&gt; &lt;profile&gt; &lt;id&gt;securecentral&lt;/id&gt; &lt;repositories&gt; &lt;repository&gt; &lt;id&gt;central&lt;/id&gt; &lt;url&gt;http://repo1.maven.org/maven2&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;/repository&gt; &lt;/repositories&gt; &lt;pluginRepositories&gt; &lt;pluginRepository&gt; &lt;id&gt;central&lt;/id&gt; &lt;url&gt;http://repo1.maven.org/maven2&lt;/url&gt; &lt;releases&gt; &lt;enabled&gt;true&lt;/enabled&gt; &lt;/releases&gt; &lt;/pluginRepository&gt; &lt;/pluginRepositories&gt; &lt;/profile&gt; &lt;/profiles&gt; &lt;activeProfiles&gt; &lt;activeProfile&gt;securecentral&lt;/activeProfile&gt; &lt;/activeProfiles&gt;&lt;/settings&gt; Maven使用镜像这里推荐使用阿里Maven仓库镜像（Nexus仓库），希望能稳定存活。修改Maven的settings.xml文件，配置mirrors的子节点，添加如下mirror：123456&lt;mirror&gt; &lt;id&gt;nexus-aliyun&lt;/id&gt; &lt;mirrorOf&gt;*&lt;/mirrorOf&gt; &lt;name&gt;Nexus aliyun&lt;/name&gt; &lt;url&gt;http://maven.aliyun.com/nexus/content/groups/public&lt;/url&gt;&lt;/mirror&gt;","categories":[{"name":"编程实践","slug":"编程实践","permalink":"http://abinnz.com/categories/编程实践/"}],"tags":[{"name":"Maven","slug":"Maven","permalink":"http://abinnz.com/tags/Maven/"}]},{"title":"Startup News爬虫","slug":"2016-10-31-python-spider-startupnews","date":"2016-10-30T16:00:00.000Z","updated":"2018-03-04T03:11:21.201Z","comments":true,"path":"posts/2016-10-31-python-spider-startupnews/","link":"","permalink":"http://abinnz.com/posts/2016-10-31-python-spider-startupnews/","excerpt":"前言&emsp;&emsp;其实周末就想总结下一些Python爬虫的技巧，但是最近几天一直忙着，没来得及写博客记录下来。今天就写写关于自己爬虫的固定代码模式，下面就用伪代码模拟下爬虫队列的模式，并以爬Starup News为例。","text":"前言&emsp;&emsp;其实周末就想总结下一些Python爬虫的技巧，但是最近几天一直忙着，没来得及写博客记录下来。今天就写写关于自己爬虫的固定代码模式，下面就用伪代码模拟下爬虫队列的模式，并以爬Starup News为例。 伪代码1234567891011121314151617resource = [] #用于存储爬虫到的资源(当然仅限与文本文字)vistedUrl = [] #用于记录已爬虫过的url地址spiderUrl = [] #即将会爬虫的url地址def spider(url): #指定url让爬虫器去抓资源 vistedUrl.append(url) #添加url到爬虫过的列表 ··· #资源获取 isOver = False if variable == value else True #结束标识，特征值描述是否有下一个资源 if not isOver: nextUrl = baseUrl + a.attr(&apos;href&apos;) #下一个爬虫的地址 spiderUrl.append(nextUrl) #添加到爬虫列表if __name__ == &apos;__main__&apos;: spiderUrl.append(&apos;http://news.dbanotes.net/&apos;) #爬虫首页 while spiderUrl: #循环爬虫 spider(spiderUrl.pop()) ··· #爬虫结束后，资源处理 ··· #资源存储 根据以上的伪代码，对Starup News编写爬虫，并将资源输出成html格式文件。 爬虫代码1234567891011121314151617181920212223242526272829303132333435363738394041424344454647484950515253545556575859606162636465666768697071727374# -*-coding: utf-8 -*-from pyquery import PyQuery as pyimport reimport osarticle = []vistedUrl = []spiderUrl = []def spider(url): vistedUrl.append(url) # 第一次访问 d = py(url,encoding=&apos;utf-8&apos;) baseUrl = re.match(r&apos;https?:/&#123;2&#125;(\\w+\\.?)+&apos;,url).group() # news标题和链接 d(&apos;#nil&apos;).parents(&apos;tr&apos;).each(getAritcle) a = d(&apos;.title:last&apos;).find(&apos;a&apos;) isOver = False if a.text() == &quot;More&quot; else True if not isOver: nextUrl = baseUrl + a.attr(&apos;href&apos;) spiderUrl.append(nextUrl)def getAritcle(i,e): td = py(e).find(&apos;td&apos;) a = py(e).find(&apos;a&apos;).eq(1) if td.size() == 3: article.append((td.text(),a.attr(&apos;href&apos;)))if __name__ == &apos;__main__&apos;: spiderUrl.append(&apos;http://news.dbanotes.net/&apos;) while spiderUrl: spider(spiderUrl.pop()) # 输出所有文章 filePath = os.path.join(os.path.abspath(&apos;.&apos;),&apos;startupnews.html&apos;) with open(filePath,&apos;w&apos;,encoding=&apos;utf-8&apos;) as file: file.write(r&apos;&lt;!DOCTYPE html&gt;&apos; + &apos;\\n&apos;) file.write(r&apos;&lt;html lang=&quot;en&quot;&gt;&apos; + &apos;\\n&apos;) file.write(r&apos;&lt;head&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;meta charset=&quot;UTF-8&quot;&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;title&gt;Startup News&lt;/title&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;link rel=&quot;stylesheet&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.2.0/css/bootstrap.min.css&quot; /&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;script src=&quot;//cdn.bootcss.com/jquery/1.11.1/jquery.min.js&quot;&gt;&lt;/script&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;script src=&quot;//cdn.bootcss.com/bootstrap/3.2.0/js/bootstrap.min.js&quot;&gt;&lt;/script&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;style type=&quot;text/css&quot;&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; a&#123;&apos; + &apos;\\n&apos;) file.write(r&apos; display: block;&apos; + &apos;\\n&apos;) file.write(r&apos; margin-bottom: 10px;&apos; + &apos;\\n&apos;) file.write(r&apos; font-size: 18px;&apos; + &apos;\\n&apos;) file.write(r&apos; &#125;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;/style&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &apos; + &apos;\\n&apos;) file.write(r&apos;&lt;/head&gt;&apos; + &apos;\\n&apos;) file.write(r&apos;&lt;body&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;div class=&quot;container&quot;&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;div class=&quot;row&quot;&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;div class=&quot;col-md-6&quot;&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;h2&gt;Startup News&lt;/h2&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;/div&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;/div&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;div class=&quot;row&quot;&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;div class=&quot;col-md-12&quot;&gt;&apos; + &apos;\\n&apos;) for link in article: href = link[1] if link[1][0:4] != &apos;http&apos;: href = vistedUrl[0] + link[1] # 首页＋相对地址 file.write(r&apos; &lt;a href=&quot;&apos; + href + &apos;&quot; target=&quot;_blank&quot;&gt;&apos; + link[0] +&apos;&lt;/a&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;/div&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;/div&gt;&apos; + &apos;\\n&apos;) file.write(r&apos; &lt;/div&gt;&apos; + &apos;\\n&apos;) file.write(r&apos;&lt;/body&gt;&apos; + &apos;\\n&apos;) file.write(r&apos;&lt;/html&gt;&apos; + &apos;\\n&apos;) print(&apos;运行结束！&apos;) print(&apos;具体详情：请查看目录下startupnews.html！&apos;) 运行结果&emsp;&emsp;Startup News ==&gt; 点击查看","categories":[{"name":"编程实践","slug":"编程实践","permalink":"http://abinnz.com/categories/编程实践/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://abinnz.com/tags/爬虫/"}]},{"title":"糗事百科热门段子爬虫","slug":"2016-10-26-python-spider-qiushibaike-hot","date":"2016-10-25T16:00:00.000Z","updated":"2018-03-04T03:10:59.602Z","comments":true,"path":"posts/2016-10-26-python-spider-qiushibaike-hot/","link":"","permalink":"http://abinnz.com/posts/2016-10-26-python-spider-qiushibaike-hot/","excerpt":"前言&emsp;&emsp;学习的成果只有通过实践才能体现，这样子进步空间才会更大。最近一段时间在看Python，其实目的就是用来写爬虫。当然少了一些简单的练手的机会，这次是通过爬虫糗事百科的热门段子作为练习目的。 第三方库&emsp;&emsp;Python的强大可能少不了众多的第三方库，做任何事总可以信手拈来。同样，解析html页面有PyQuery，用法与jQuery基本相似，所以能很快上手PyQuery的用法。","text":"前言&emsp;&emsp;学习的成果只有通过实践才能体现，这样子进步空间才会更大。最近一段时间在看Python，其实目的就是用来写爬虫。当然少了一些简单的练手的机会，这次是通过爬虫糗事百科的热门段子作为练习目的。 第三方库&emsp;&emsp;Python的强大可能少不了众多的第三方库，做任何事总可以信手拈来。同样，解析html页面有PyQuery，用法与jQuery基本相似，所以能很快上手PyQuery的用法。 安装pyquery(选择其中一种) pip安装：pip install pyquery 先安装已编译的Lxml二进制包，再安装PyQuery(依赖Lxml) &emsp;&emsp;这里为什么有两种办法呢，因为作者使用第一种办法在安装过程中出现错误，是通过第二种办法成功安装的。错误原因正是缺少相应的编译环境，所以才选择先安装已编译的二进制包Lxml，再安装PyQuery。附上：已编译的二进制包地址 爬虫代码123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051# -*- coding: utf-8 -*-import reimport pdbimport osfrom pyquery import PyQuery as pyarticle = [] #糗百段子visitedUrl = [] #已经爬虫过的地址spiderUrl = [] #即将爬虫的地址def spider(url): global article global visitedUrl global spiderUrl visitedUrl.append(url) headers = &#123; &apos;Accept-Encoding&apos;:&apos;gzip, deflate, sdch&apos;, &apos;Connection&apos;:&apos;keep-alive&apos;, &apos;Accept&apos;:&apos;text/html,application/xhtml+xml,application/xml;q=0.9,image/webp,*/*;q=0.8&apos;, &apos;User-Agent&apos;:&apos;Mozilla/5.0 (Windows NT 10.0; Win64; x64) AppleWebKit/537.36 (KHTML, like Gecko) Chrome/53.0.2785.143 Safari/537.36&apos; &#125; d = py(url,headers=headers,encoding=&apos;utf-8&apos;) d(&apos;.article&apos;).each( lambda i,e: article.append((py(e).attr(&apos;id&apos;),py(e).find(&apos;.content&apos;).text())) ) # 下一个爬虫链接 nextUrl = d(&quot;.pagination .current&quot;).parents(&apos;li&apos;).nextAll(&apos;li a:first&apos;).attr(&apos;href&apos;) if nextUrl and nextUrl != r&apos;/hot/&apos;: nextUrl = re.match(r&apos;https?://(\\w\\.?)+&apos;,url).group() + nextUrl spiderUrl.append(nextUrl) # pdb.set_trace()if __name__ == &apos;__main__&apos;: spiderUrl.append(&apos;http://www.qiushibaike.com/&apos;) while spiderUrl: spider(spiderUrl.pop()) #输出爬虫过的地址 path = os.path.join(os.path.abspath(&apos;.&apos;),&apos;visited.txt&apos;) with open(path,&apos;w&apos;,encoding=&apos;utf-8&apos;) as file: for index in range(len(visitedUrl)): file.write(&apos;[&apos; + str(index+1) + &apos;]:&apos; + visitedUrl[index] + &apos;\\n&apos;) #输出爬虫到的段子 path = os.path.join(os.path.abspath(&apos;.&apos;),&apos;article.txt&apos;) with open(path,&apos;w&apos;,encoding=&apos;utf-8&apos;) as file: for index in range(len(article)): file.write(&apos;[&apos; + str(index + 1) + &apos;]\\n&apos; +article[index][0] + &apos;\\n&apos; + article[index][1] + &apos;\\n&apos;) print(&apos;运行结束！&apos;) print(&apos;共计抓取：&apos; + str(len(visitedUrl)) + &apos;个地址，&apos; + str(len(article)) + &apos;个段子！&apos;) print(&apos;具体详情：请查看目录下visited.txt和article.txt！&apos;)","categories":[{"name":"编程实践","slug":"编程实践","permalink":"http://abinnz.com/categories/编程实践/"}],"tags":[{"name":"爬虫","slug":"爬虫","permalink":"http://abinnz.com/tags/爬虫/"}]},{"title":"Python中文乱码问题解决","slug":"2016-10-18-python-chinese-character-question","date":"2016-10-17T16:00:00.000Z","updated":"2018-03-04T03:18:51.631Z","comments":true,"path":"posts/2016-10-18-python-chinese-character-question/","link":"","permalink":"http://abinnz.com/posts/2016-10-18-python-chinese-character-question/","excerpt":"前言&emsp;&emsp;趁着周末，赶紧学习充电，开始入门Python的学习，其实是想用Python来写写爬虫，爬些一些网页。当然对于Python，爬虫写起来确实不费劲，也很简洁。所以，周末抽点时间学习下Python的语法。在学习的过程中，有很多东西可以写总结，下面就Python对中文字符集编码处理的记录。 默认字符集&emsp;&emsp;无论哪种语言都离不开对中文乱码问题的处理，所以Python也不例外。在最新的Python 3版本中，字符串是以Unicode(2个字节)编码的，对很多语言是支持的。对于编码的历史进程，可以在这里看看，可能看后还是懵逼的，但是简单总结就是使用utf-8编码来解决字符编码的历史遗留问题。","text":"前言&emsp;&emsp;趁着周末，赶紧学习充电，开始入门Python的学习，其实是想用Python来写写爬虫，爬些一些网页。当然对于Python，爬虫写起来确实不费劲，也很简洁。所以，周末抽点时间学习下Python的语法。在学习的过程中，有很多东西可以写总结，下面就Python对中文字符集编码处理的记录。 默认字符集&emsp;&emsp;无论哪种语言都离不开对中文乱码问题的处理，所以Python也不例外。在最新的Python 3版本中，字符串是以Unicode(2个字节)编码的，对很多语言是支持的。对于编码的历史进程，可以在这里看看，可能看后还是懵逼的，但是简单总结就是使用utf-8编码来解决字符编码的历史遗留问题。 使用utf-8编码 123456含有中文的源码文件指定保存为utf-8编码，并却在文件开头写上这两行，当Python解释器读取源代码时，会以utf-8编码读取 &gt; \\#!/usr/bin/env python3 &gt; \\# -*- coding: utf-8 -*- &gt; 第一行注释是为了告诉Linux/OS X系统，这是一个Python可执行程序，Windows系统会忽略这个注释。 &gt; 第二行注释是为了告诉Python解释器，按照UTF-8编码读取源代码，否则，你在源代码中写的中文输出可能会有乱码。 SublimeText3 中文&emsp;&emsp;SublimeText作为轻量级的文本编辑器，用来写写Python是最好不过的，可以很方便的编译测试(Ctrl+B)。但是，比如print(‘中文’)，在Console却无法打印’中文’。为什么Python无法在控制台输出中文呢，其实是命令窗口默认编码(cp936)的问题，通过将源码输出到命令窗口，无法对中文字符正确解码。 正确Python.sublime-build配置 123456&#123; &quot;cmd&quot;: [&quot;python&quot;,&quot;-u&quot;,&quot;$file&quot;], &quot;file_regex&quot;: &quot;^[ ]*File \\&quot;(...*?)\\&quot;, line ([0-9]*)&quot;, &quot;selector&quot;: &quot;source.python&quot;, &quot;encoding&quot;: &quot;cp936&quot; &#125; UnicodeEncodeError 爬了百度的首页，返回的html/text想打印出来结果发生了一下错误： 1UnicodeEncodeError: &apos;gbk&apos; codec can&apos;t encode character &apos;\\xbb&apos; in position 8530: illegal multibyte sequence 代码如下： 123import urllib.request response=urllib.request.urlopen(&apos;http://www.baidu.com&apos;) print(response.read().decode(&apos;utf-8&apos;)) 当然：同样有人和我一样有相似的问题，也将问题解决了，具体原因请查看==&gt;这里 解决办法：123import io import syssys.stdout = io.TextIOWrapper(sys.stdout.buffer,encoding=&apos;gb18030&apos;) #改变标准输出的默认编码 小结&emsp;&emsp;终于，把中文编码问题都解决，感慨下写个小程序真不容易，连碰到几个坑，时间就这样过去。当然，这些问题我也都记录下来，希望能帮到其他人，不用在这些坑停留那么久。","categories":[{"name":"编程语言","slug":"编程语言","permalink":"http://abinnz.com/categories/编程语言/"}],"tags":[{"name":"Python","slug":"Python","permalink":"http://abinnz.com/tags/Python/"}]},{"title":"图片裁剪组件cropper","slug":"2016-10-08-photo-edit-cropper-plugin","date":"2016-10-07T16:00:00.000Z","updated":"2018-03-04T03:07:47.975Z","comments":true,"path":"posts/2016-10-08-photo-edit-cropper-plugin/","link":"","permalink":"http://abinnz.com/posts/2016-10-08-photo-edit-cropper-plugin/","excerpt":"前言&emsp;&emsp;对于大多数网站，在图片上传到服务器之前，会对图片进行一些裁剪操作，以便得到更好规格的图片(个人头像)。这里就可以借助前端的组件cropper实现对图片的裁剪。当然，这里需要解决一个问题，如何获取即将上传到服务器的图片，显示在网页以便后期的操作。在图片显示在网页上，方法有大体有两种：前者，将图片先上传到服务器再返回图片url地址，这方法即牺牲了服务器的性能，又脱离当前的需求(不满足图片上传到服务器之前实现对图片的裁剪操作)；后者，直接获取本地图片的资源并加载在当前的网页上，这种方法是最恰当不过了，不过在实现之前需要考虑不同浏览器之间的兼容性，保证不同浏览器都达到相同的效果。&emsp;&emsp;在这里，我总结一些js获取本地图片资源的方法，记录这些走过的坑。同时，也记录cropper一些使用方法。","text":"前言&emsp;&emsp;对于大多数网站，在图片上传到服务器之前，会对图片进行一些裁剪操作，以便得到更好规格的图片(个人头像)。这里就可以借助前端的组件cropper实现对图片的裁剪。当然，这里需要解决一个问题，如何获取即将上传到服务器的图片，显示在网页以便后期的操作。在图片显示在网页上，方法有大体有两种：前者，将图片先上传到服务器再返回图片url地址，这方法即牺牲了服务器的性能，又脱离当前的需求(不满足图片上传到服务器之前实现对图片的裁剪操作)；后者，直接获取本地图片的资源并加载在当前的网页上，这种方法是最恰当不过了，不过在实现之前需要考虑不同浏览器之间的兼容性，保证不同浏览器都达到相同的效果。&emsp;&emsp;在这里，我总结一些js获取本地图片资源的方法，记录这些走过的坑。同时，也记录cropper一些使用方法。 加载图片 Chrome：是无法直接获取file对象的文本值，这样是无法直接加载本地图片资源。 123解决办法：获取dataURL，用于img标签src属性。var windowURL = window.URL || window.webkitURL;var dataURL = windowURL.createObjectURL(fileObj.files[0]); Edge、IE11 and 10：解决办法同上 IE9以下：是可以直接获取file对象的文本值，所以问题更容易解决。 12解决办法：获取file对象的文本值并加上file协议。var dataURL = &quot;file:///&quot; + $file.val(); 触发器设置&emsp;&emsp;通过点击file控件，选择本地图片资源后，触发onchange回调函数，实现图片的切换。 file控件布 123456&lt;h3 class=&quot;page-header&quot;&gt;Choose a picture&lt;/h3&gt;&lt;div class=&quot;form-group form-inline&quot;&gt; &lt;label&gt;Picture：&lt;/label&gt; &lt;input type=&quot;file&quot; class=&quot;form-control&quot; id=&quot;file&quot; &gt; &lt;button class=&quot;btn btn-default&quot; id=&quot;btnSave&quot;&gt;Save&lt;/button&gt;&lt;/div&gt; 结合图片预览 12345678910111213141516171819&lt;script type=&quot;text/javascript&quot;&gt;$(&quot;#file&quot;).on(&quot;change&quot;,function()&#123; var $file = $(this); var fileObj = $file[0]; var windowURL = window.URL || window.webkitURL; var dataURL; if(fileObj &amp;&amp; fileObj.files &amp;&amp; fileObj.files[0])&#123; //Chrome、Edge、IE11|10 dataURL = windowURL.createObjectURL(fileObj.files[0]); &#125;else&#123; //IE9 file:/// 协议 dataURL = &quot;file:///&quot; + $file.val(); &#125; //替换img.src $(&quot;#image&quot;).attr(&quot;src&quot;,dataURL); //创建裁剪区 buildCropper(dataURL);&#125;);&lt;/script&gt; cropper使用 更多详细信息查看项目 cropper图片裁剪 GitHub项目地址：点击查看 Demo实例地址：点击查看 最终效果&emsp;&emsp;本例Demo","categories":[{"name":"前端","slug":"前端","permalink":"http://abinnz.com/categories/前端/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://abinnz.com/tags/JS/"}]},{"title":"Bootstrap's progress bar","slug":"2016-09-24-bootstrap-progress-bar","date":"2016-09-23T16:00:00.000Z","updated":"2018-03-04T03:07:42.926Z","comments":true,"path":"posts/2016-09-24-bootstrap-progress-bar/","link":"","permalink":"http://abinnz.com/posts/2016-09-24-bootstrap-progress-bar/","excerpt":"前言&emsp;&emsp;前几天，github个人入口页面改版了，当然改版的小细节也很多，确实比以前体验度更好。今天我拿其中一点来讲讲，点击页面链接请求时顶端会有一条滑动的进度条，这一点做的很细心，用户体验就很好。在浏览器向服务器发送请求到服务器响应的这一小段时间，将用户的注意力吸引集中在滑动的进度条上，这样子用户就不会觉得是在干等数据请求。当然，进度条也是作为请求的小提示。说那么多，还是动手写写个小demo仿制请求进度条玩玩。","text":"前言&emsp;&emsp;前几天，github个人入口页面改版了，当然改版的小细节也很多，确实比以前体验度更好。今天我拿其中一点来讲讲，点击页面链接请求时顶端会有一条滑动的进度条，这一点做的很细心，用户体验就很好。在浏览器向服务器发送请求到服务器响应的这一小段时间，将用户的注意力吸引集中在滑动的进度条上，这样子用户就不会觉得是在干等数据请求。当然，进度条也是作为请求的小提示。说那么多，还是动手写写个小demo仿制请求进度条玩玩。 动手 CSS、JS引入 123&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;//cdn.bootcss.com/bootstrap/3.3.7/css/bootstrap.min.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/jquery/3.1.0/jquery.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;//cdn.bootcss.com/bootstrap/3.3.7/js/bootstrap.js&quot;&gt;&lt;/script&gt; Progress Bar 123456789&lt;div class=&quot;row&quot; style=&quot;margin-bottom: 3px;&quot;&gt; &lt;div class=&quot;progress&quot; style=&quot;display: none;height: 3px;margin-bottom: 0px&quot;&gt; &lt;div class=&quot;progress-bar progress-bar-success progress-bar-striped active&quot; aria-valuenow=&quot;0&quot; aria-valuemin=&quot;0&quot; aria-valuemax=&quot;100&quot; style=&quot;width: 0%;&quot; &gt; &lt;/div&gt; &lt;/div&gt;&lt;/div&gt;&lt;div class=&quot;row&quot;&gt; &lt;button id=&quot;btn&quot; class=&quot;btn btn-default&quot;&gt;点击&lt;/button&gt;&lt;/div&gt; Script 123456789101112131415161718192021222324252627282930313233&lt;script type=&quot;text/javascript&quot;&gt;function showProgress()&#123; //显示进度条 $(&quot;.progress&quot;).attr(&quot;style&quot;,&quot;display: block;height: 3px;margin-bottom: 0px&quot;); //消除父级div的margin-bottom $(&quot;.progress&quot;).parent().removeAttr(&quot;style&quot;); //定时器 var timeId = window.setInterval(function()&#123; var valuenow = parseInt($(&quot;.progress-bar&quot;).attr(&quot;aria-valuenow&quot;)) + 20; var valuemax = parseInt($(&quot;.progress-bar&quot;).attr(&quot;aria-valuemax&quot;)); $(&quot;.progress-bar&quot;).attr(&quot;aria-valuenow&quot;,valuenow); var value = valuenow/valuemax*100; $(&quot;.progress-bar&quot;).attr(&quot;style&quot;,&quot;width:&quot; + value + &quot;%&quot;); if(value &gt;= 100) &#123; window.clearInterval(timeId); window.setTimeout(&quot;hideProgress()&quot;,500); &#125; &#125;,200);&#125;function hideProgress()&#123; //隐藏进度条 $(&quot;.progress&quot;).attr(&quot;style&quot;,&quot;display: none;height: 3px;margin-bottom: 0px&quot;); //补充父级div的margin-bottom $(&quot;.progress&quot;).parent().attr(&quot;style&quot;,&quot;margin-bottom: 3px;&quot;); //进度条重新赋值 $(&quot;.progress-bar&quot;).attr(&quot;aria-valuenow&quot;,&quot;0&quot;); $(&quot;.progress-bar&quot;).attr(&quot;style&quot;,&quot;width: 0%;&quot;);&#125;$(&quot;#btn&quot;).on(&quot;click&quot;,function()&#123; showProgress();&#125;);&lt;/script&gt; 最终效果&emsp;&emsp;点击查看，对高版本IE有效","categories":[{"name":"前端","slug":"前端","permalink":"http://abinnz.com/categories/前端/"}],"tags":[{"name":"Bootstrap","slug":"Bootstrap","permalink":"http://abinnz.com/tags/Bootstrap/"}]},{"title":"在CentOS 6.6 上编译以及安装最新版Git","slug":"2016-09-21-centos-install-git","date":"2016-09-20T16:00:00.000Z","updated":"2018-03-04T03:07:19.524Z","comments":true,"path":"posts/2016-09-21-centos-install-git/","link":"","permalink":"http://abinnz.com/posts/2016-09-21-centos-install-git/","excerpt":"前言&emsp;&emsp;之前一直没机会接触过Linux系统，恰巧前几天开始接触到CentOS 6.6，当然上来的第一件事，就是安装Git。网上有些教程，可能由于系统的差异性，所以也碰到好一些坑。我希望把这些坑记录下来，避免下次再犯类似的错误或者能迅速解决问题。 工具&emsp;&emsp;连接远程linux服务器，当然首选Xshell，我自己使用的Xshell5。","text":"前言&emsp;&emsp;之前一直没机会接触过Linux系统，恰巧前几天开始接触到CentOS 6.6，当然上来的第一件事，就是安装Git。网上有些教程，可能由于系统的差异性，所以也碰到好一些坑。我希望把这些坑记录下来，避免下次再犯类似的错误或者能迅速解决问题。 工具&emsp;&emsp;连接远程linux服务器，当然首选Xshell，我自己使用的Xshell5。 配置 连接 配置：名称、*协议(SSH)、*主机、*端口 用户身份验证 方法：Public Key 用户名：Input your user name 用户密钥：导入保存的SSH Key 连接&emsp;&emsp;完成上述的配置后就可以连接远程主机。&emsp;&emsp;管理员登陆：输入命令符-sudo -i 安装Git 安装wget：yum install wget -y 安装依赖包(必须) yum install curl-devel expat-devel gettext-devel openssl-devel zlib-devel yum install gcc perl-ExtUtils-MakeMaker 获取最近版本：点击查看 路径定向：cd /usr/src 下载源码：wget https://github.com/git/git/archive/v2.10.0.tar.gz 解压文件：tar xzf v2.10.0.tar.gz(解压后 git-2.10.0 文件夹) 编译安装(按照步骤)： cd git-2.10.0 make prefix=/usr/local/git all make prefix=/usr/local/git install echo &quot;export PATH=$PATH:/usr/local/git/bin&quot; &gt;&gt; /etc/bashrc source /etc/bashrc &emsp;&emsp;编译安装可能需要一段时间，慢慢等吧！ 大功告成&emsp;&emsp;检查一下版本号：git --version ==&gt; git version 2.10.0","categories":[{"name":"Linux","slug":"Linux","permalink":"http://abinnz.com/categories/Linux/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://abinnz.com/tags/Git/"}]},{"title":"表格数据的导出","slug":"2016-09-11-export-table-data","date":"2016-09-10T16:00:00.000Z","updated":"2018-03-04T03:06:45.535Z","comments":true,"path":"posts/2016-09-11-export-table-data/","link":"","permalink":"http://abinnz.com/posts/2016-09-11-export-table-data/","excerpt":"前言&emsp;&emsp;大多数后台系统都会使用table来呈现数据，所以将table导出成excel文件的需求是非常常见的。幸运的是，可以通过tableExport将table数据导出，而且支持多种格式(JSON, XML, CSV, TXT, SQL, Word, Excel, PNG, PDF)文件的导出，这点是非常方便的。同时，数据导出不用再次与后台程序交与，可以减轻服务器端的压力。","text":"前言&emsp;&emsp;大多数后台系统都会使用table来呈现数据，所以将table导出成excel文件的需求是非常常见的。幸运的是，可以通过tableExport将table数据导出，而且支持多种格式(JSON, XML, CSV, TXT, SQL, Word, Excel, PNG, PDF)文件的导出，这点是非常方便的。同时，数据导出不用再次与后台程序交与，可以减轻服务器端的压力。 关于插件 Plugins: tableExport.jquery.pluginDescription: Export your table data to JSON, XML, CSV, TXT, SQL, Word, Excel, PNG, PDF.Resources: 主页 例子 JS引入jquery当然是必不可少的： 1script type=&quot;text/javascript&quot; src=&quot;jquery.min.js&quot;&gt;&lt;/script&gt; 其次，再引入tableExport（按需求引入）： 1&lt;script type=&quot;text/javascript&quot; src=&quot;tableExport.min.js&quot;&gt;&lt;/script&gt; 导出excel123456789101112131415161718192021222324252627282930313233343536373839404142434445464748495051&lt;table id=&quot;exportContent&quot;&gt; &lt;thead&gt; &lt;tr&gt; &lt;th&gt;序号&lt;/th&gt; &lt;th&gt;姓名&lt;/th&gt; &lt;th&gt;性别&lt;/th&gt; &lt;th&gt;年龄&lt;/th&gt; &lt;/tr&gt; &lt;/thead&gt; &lt;tbody&gt; &lt;tr&gt; &lt;td&gt;1&lt;/td&gt; &lt;td&gt;AA&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;17&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;2&lt;/td&gt; &lt;td&gt;BB&lt;/td&gt; &lt;td&gt;女&lt;/td&gt; &lt;td&gt;18&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;3&lt;/td&gt; &lt;td&gt;CC&lt;/td&gt; &lt;td&gt;男&lt;/td&gt; &lt;td&gt;19&lt;/td&gt; &lt;/tr&gt; &lt;tr&gt; &lt;td&gt;4&lt;/td&gt; &lt;td&gt;DD&lt;/td&gt; &lt;td&gt;女&lt;/td&gt; &lt;td&gt;20&lt;/td&gt; &lt;/tr&gt; &lt;/tbody&gt;&lt;/table&gt;&lt;a href=&quot;#&quot; onclick=&quot;exportContent()&quot;&gt;导出excel&lt;/a&gt;&lt;script&gt; function exportContent() &#123; $(&apos;#exportContent&apos;).tableExport( &#123; type: &apos;excel&apos;, fileName: &apos;报表统计&apos;, worksheetName: &apos;报表一&apos;, excelstyles: [ &apos;border-bottom&apos; ] &#125; ); &#125;&lt;/script&gt;","categories":[{"name":"前端","slug":"前端","permalink":"http://abinnz.com/categories/前端/"}],"tags":[{"name":"JS","slug":"JS","permalink":"http://abinnz.com/tags/JS/"}]},{"title":"初识Bootstrap，左侧菜单栏的制作","slug":"2016-09-07-my-bootstrap-demo","date":"2016-09-06T16:00:00.000Z","updated":"2018-03-04T03:17:32.929Z","comments":true,"path":"posts/2016-09-07-my-bootstrap-demo/","link":"","permalink":"http://abinnz.com/posts/2016-09-07-my-bootstrap-demo/","excerpt":"前言&emsp;&emsp;最近，有个简易的任务需要做个后台管理系统，没有现成的页面模板，只能亲自动手。有两个方案： 用别人写好的后台模板页面拿来改的，修改复杂程度高，同时任务需求也很简单，用了别人的模板更容易束缚自己。 想着Bootstrap前端框架的强大，不如利用这次任务的机会初识Bootstrap，简易制后台页面，满足任务需求。显然，跟着Bootstrap中文网的实例很快就做出想要的页面效果。特别推荐：更多Bootstrap主题[点击查看]","text":"前言&emsp;&emsp;最近，有个简易的任务需要做个后台管理系统，没有现成的页面模板，只能亲自动手。有两个方案： 用别人写好的后台模板页面拿来改的，修改复杂程度高，同时任务需求也很简单，用了别人的模板更容易束缚自己。 想着Bootstrap前端框架的强大，不如利用这次任务的机会初识Bootstrap，简易制后台页面，满足任务需求。显然，跟着Bootstrap中文网的实例很快就做出想要的页面效果。特别推荐：更多Bootstrap主题[点击查看] 文件引入 css引入： 最好，为了统一规范项目css文件，创建css文件夹用于存放相关css文件。 另外，其它一些style存放在main.css中（外部css文件引入）。 js引入： 同样，为了统一规范项目js文件，创建js文件夹用于存放相关js文件。 文件引入： 1234&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/bootstrap.min.css&quot;&gt;&lt;link rel=&quot;stylesheet&quot; type=&quot;text/css&quot; href=&quot;css/main.css&quot;&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/jquery-3.1.0.min.js&quot;&gt;&lt;/script&gt;&lt;script type=&quot;text/javascript&quot; src=&quot;js/bootstrap.min.js&quot;&gt;&lt;/script&gt; 页脚设置将footer固定在页面底部的实现方法： HTML结构： 123&lt;body&gt; &lt;footer&gt;footer&lt;/footer&gt;&lt;/body&gt; CSS设置： 12/* 动态为footer添加类fixed-bottom */.fixed-bottom &#123;position: fixed;bottom: 0;width:100%;&#125; js代码： 123456789101112131415$(function()&#123; function footerPosition()&#123; $(&quot;footer&quot;).removeClass(&quot;fixed-bottom&quot;); var contentHeight = document.body.scrollHeight,//网页正文全文高度 winHeight = window.innerHeight;//可视窗口高度，不包括浏览器顶部工具栏 if(!(contentHeight &gt; winHeight))&#123; //当网页正文高度小于可视窗口高度时，为footer添加类fixed-bottom $(&quot;footer&quot;).addClass(&quot;fixed-bottom&quot;); &#125; else &#123; $(&quot;footer&quot;).removeClass(&quot;fixed-bottom&quot;); &#125; &#125; footerPosition(); $(window).resize(footerPosition);&#125;); 最终效果&emsp;&emsp;[点击查看]","categories":[{"name":"前端","slug":"前端","permalink":"http://abinnz.com/categories/前端/"}],"tags":[{"name":"Bootstrap","slug":"Bootstrap","permalink":"http://abinnz.com/tags/Bootstrap/"}]},{"title":"横表与纵表互换-Oracle","slug":"2016-08-30-oracle-table-switch","date":"2016-08-29T16:00:00.000Z","updated":"2018-03-04T02:58:44.441Z","comments":true,"path":"posts/2016-08-30-oracle-table-switch/","link":"","permalink":"http://abinnz.com/posts/2016-08-30-oracle-table-switch/","excerpt":"一、 横表与纵表1.1 横表 定义：一行记录表示了一个实体记录信息 表结构类似：主键、字段1、字段2、字段3… 如下表所示： 123ID STNAME CHINESE MATH ENGLISH1 A 80.0 85.0 88.0 2 B 82.0 86.0 85.0 巧记：在横表中，只需一条记录就可以记录一名学生所有科目的考试成绩。","text":"一、 横表与纵表1.1 横表 定义：一行记录表示了一个实体记录信息 表结构类似：主键、字段1、字段2、字段3… 如下表所示： 123ID STNAME CHINESE MATH ENGLISH1 A 80.0 85.0 88.0 2 B 82.0 86.0 85.0 巧记：在横表中，只需一条记录就可以记录一名学生所有科目的考试成绩。 1.2 纵表 定义：一行记录用于表示某个属性名和属性值对应关系 表结构类似：主键、字段代码(字段1、字段2、字段3)、字段值 如下表所示： 1234567STNAME CLSTYPE SCOREA 语文 80.0 A 数学 85.0 A 英语 88.0 B 语文 82.0 B 数学 86.0 B 英语 85.0 巧记：在纵表中，需要3条记录才可以记录一名学生所有科目的考试成绩。 1.3 总结&emsp;&emsp;总之，横表的好处是清晰可见，一目了然，但是如果现在要把这个表加一个字段，那么就必须重建表结构。对于纵表，在纵表中只需要添加一条记录，就可以添加一个字段，所消耗的代价远比横表小，但是纵表的对于数据描述不是很清晰，而且会造成数据库数量很多。 二、横表和纵表的互相转换2.1. 横表转换成纵表 横表转换纵表 使用union123select id,stname &quot;姓名&quot;,&apos;语文&apos; &quot;课程&quot;,chinese &quot;分数&quot; from table_sam_test2 union select id,stname &quot;姓名&quot;,&apos;数学&apos; &quot;课程&quot;,math &quot;分数&quot; from table_sam_test2 union select id,stname &quot;姓名&quot;,&apos;英语&apos; &quot;课程&quot;,english &quot;分数&quot; from table_sam_test2; 2.2. 纵表转换成横表 纵表转换横表 方法一：使用decode函数（推荐） 12345select stname &quot;姓名&quot;, sum(decode(clstype,&apos;语文&apos;,score)) &quot;语文&quot;,sum(decode(clstype,&apos;数学&apos;,score)) &quot;数学&quot;,sum(decode(clstype,&apos;英语&apos;,score)) &quot;英语&quot;from table_sam_test1 group by stname; 方法二：使用case语句 12345select stname &quot;姓名&quot;, sum(case clstype when &apos;语文&apos; then score end) &quot;语文&quot;,sum(case clstype when &apos;数学&apos; then score end) &quot;数学&quot;,sum(case clstype when &apos;英语&apos; then score end) &quot;英语&quot;from table_sam_test1 group by stname; 方法三：使用子查询+union，如果有多列,sql语句就会很长（不推荐） 123456with sql1 as(select stname,score chinese,0 math,0 english from table_sam_test1 where clstype=&apos;语文&apos; unionselect stname,0 chinese,score math,0 english from table_sam_test1 where clstype=&apos;数学&apos; unionselect stname,0 chinese,0 math,score english from table_sam_test1 where clstype=&apos;英语&apos;)select stname &quot;姓名&quot;,sum(chinese) &quot;语文&quot;,sum(math) &quot;数学&quot;,sum(english) &quot;英语&quot;from sql1 group by stname;","categories":[{"name":"数据库","slug":"数据库","permalink":"http://abinnz.com/categories/数据库/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://abinnz.com/tags/Oracle/"}]},{"title":"部署JavaWeb应用到Heroku","slug":"2016-08-20-heroku-deploy-project","date":"2016-08-19T16:00:00.000Z","updated":"2018-03-04T02:59:40.769Z","comments":true,"path":"posts/2016-08-20-heroku-deploy-project/","link":"","permalink":"http://abinnz.com/posts/2016-08-20-heroku-deploy-project/","excerpt":"一、部署前提 maven项目 pom.xml添加jetty-runner(plugin) 123456789101112131415161718192021&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt;&lt;goal&gt;copy&lt;/goal&gt;&lt;/goals&gt; &lt;configuration&gt; &lt;artifactItems&gt; &lt;artifactItem&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-runner&lt;/artifactId&gt; &lt;version&gt;9.2.18.v20160721&lt;/version&gt; &lt;destFileName&gt;jetty-runner.jar&lt;/destFileName&gt; &lt;/artifactItem&gt; &lt;/artifactItems&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 本地测试(按需更换version)：jdk1.7+: &lt;version&gt;9.2.18.v20160721&lt;/version&gt;jdk1.8+: &lt;version&gt;9.3.10.v20160621&lt;/version&gt;","text":"一、部署前提 maven项目 pom.xml添加jetty-runner(plugin) 123456789101112131415161718192021&lt;plugin&gt; &lt;groupId&gt;org.apache.maven.plugins&lt;/groupId&gt; &lt;artifactId&gt;maven-dependency-plugin&lt;/artifactId&gt; &lt;version&gt;2.3&lt;/version&gt; &lt;executions&gt; &lt;execution&gt; &lt;phase&gt;package&lt;/phase&gt; &lt;goals&gt;&lt;goal&gt;copy&lt;/goal&gt;&lt;/goals&gt; &lt;configuration&gt; &lt;artifactItems&gt; &lt;artifactItem&gt; &lt;groupId&gt;org.eclipse.jetty&lt;/groupId&gt; &lt;artifactId&gt;jetty-runner&lt;/artifactId&gt; &lt;version&gt;9.2.18.v20160721&lt;/version&gt; &lt;destFileName&gt;jetty-runner.jar&lt;/destFileName&gt; &lt;/artifactItem&gt; &lt;/artifactItems&gt; &lt;/configuration&gt; &lt;/execution&gt; &lt;/executions&gt;&lt;/plugin&gt; 本地测试(按需更换version)：jdk1.7+: &lt;version&gt;9.2.18.v20160721&lt;/version&gt;jdk1.8+: &lt;version&gt;9.3.10.v20160621&lt;/version&gt; 有本地依赖jar包需要添加resource比如本项目依赖smartqq-1.0.jar(远程仓库没有smartqq-1.0.jar)，maven打包时会将本地依赖jar打包进target 1234567&lt;resource&gt; &lt;directory&gt;$&#123;project.basedir&#125;/src/main/resources/lib&lt;/directory&gt; &lt;targetPath&gt;$&#123;project.basedir&#125;/target/xiaov/WEB-INF/lib&lt;/targetPath&gt; &lt;includes&gt; &lt;include&gt;**/smartqq-1.0.jar&lt;/include&gt; &lt;/includes&gt;&lt;/resource&gt; 在项目根目录创建Procfile文件，没有任何后缀，并添加： 1web: java $JAVA_OPTS -cp target/dependency/jetty-runner.jar org.eclipse.jetty.runner.Runner --port $PORT target/*.war heroku官网教程：文档感觉是没更新，高版本jetty-runer是没有主料清单的，按照官网的教程应用是无法跑起来的 二、部署完毕&emsp;&emsp;对于部署在heroku的APP，免费是有一些限制(点击查看)，网站在30分钟后若是没有任何request请求的，APP会自动睡眠。因此，可以使用360网站服务监控，定时向某个指定网站发送request请求，避免heroku部署的APP自动进入睡眠。","categories":[{"name":"应用部署","slug":"应用部署","permalink":"http://abinnz.com/categories/应用部署/"}],"tags":[{"name":"JavaWeb","slug":"JavaWeb","permalink":"http://abinnz.com/tags/JavaWeb/"}]},{"title":"如何避免浏览器自动缓存","slug":"2016-08-16-no-cache","date":"2016-08-15T16:00:00.000Z","updated":"2018-03-04T03:04:02.490Z","comments":true,"path":"posts/2016-08-16-no-cache/","link":"","permalink":"http://abinnz.com/posts/2016-08-16-no-cache/","excerpt":"使用meta标签123&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot;&gt;&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;Cache-control&quot; content=&quot;no-cache&quot;&gt;","text":"使用meta标签123&lt;meta http-equiv=&quot;Expires&quot; content=&quot;0&quot;&gt;&lt;meta http-equiv=&quot;Pragma&quot; content=&quot;no-cache&quot;&gt;&lt;meta http-equiv=&quot;Cache-control&quot; content=&quot;no-cache&quot;&gt; 设置响应头123response.setDateHeader(&quot;Expires&quot;,0); response.setHeader(&quot;Pragma&quot;,&quot;no-cache&quot;); response.setHeader(&quot;Cache-Control&quot;,&quot;no-cache&quot;);","categories":[{"name":"前端","slug":"前端","permalink":"http://abinnz.com/categories/前端/"}],"tags":[{"name":"HTML","slug":"HTML","permalink":"http://abinnz.com/tags/HTML/"}]},{"title":"对于NULL值的处理-Oracle","slug":"2016-08-12-oracle-null","date":"2016-08-11T16:00:00.000Z","updated":"2018-03-04T03:03:42.474Z","comments":true,"path":"posts/2016-08-12-oracle-null/","link":"","permalink":"http://abinnz.com/posts/2016-08-12-oracle-null/","excerpt":"之前使用Mysql的比较多，所以有意识的认为Oracle对于NULL的处理与Mysql是一样，促成这种错误的认识。 一、查询数据假设查询EMP[Table]，员工没有佣金的数据，查询条件：comm = 0 1SELECT * FROM EMP WHERE COMM=0; Mysql: 能直接带出满足字段条件的记录，无论是NULL值Oracle: 显然是行不通的，需要对NULL值进行预处理，才能带出查询的记录，否则查询的结果没有NULL值的结果。","text":"之前使用Mysql的比较多，所以有意识的认为Oracle对于NULL的处理与Mysql是一样，促成这种错误的认识。 一、查询数据假设查询EMP[Table]，员工没有佣金的数据，查询条件：comm = 0 1SELECT * FROM EMP WHERE COMM=0; Mysql: 能直接带出满足字段条件的记录，无论是NULL值Oracle: 显然是行不通的，需要对NULL值进行预处理，才能带出查询的记录，否则查询的结果没有NULL值的结果。 二、解决办法1.&nbsp;使用NVL2(expr1,expr2,expr3)函数 功能：如果参数表达式expr1值为NULL，则NVL2()函数返回参数表达式expr3的值；如果参数表达式expr1值不为NULL，则NVL2()函数返回参数表达式expr2的值。即：NVL2(表达式,不为空设值,为空设值)。 因此，将上述sql语句改成： 1SELECT * FROM EMP WHERE NVL2(COMM,COMM,0) = 0; 2.&nbsp;使用DECODE(value, if1, then1, if2,then2, if3,then3, . . . else ) 功能：value 代表某个表的任何类型的任意列或一个通过计算所得的任何结果。当每个value值被测试：如果value的值为if1，Decode 函数的结果是then1；如果value等于if2，Decode函数结果是then2；如果value结果不等于给出的任何配对时，Decode 结果就返回else 。 因此，将上述sql语句改成： 1SELECT * FROM EMP WHERE DECODE(COMM,NULL,0) = 0; 三、问题原因先看三个例子： 1.&nbsp;例子 1234567891011declarea number(2):= 1;b number(3):= null;begin if a = b then dbms_output.put_line(&apos;a等于b&apos;); else dbms_output.put_line(&apos;a不等于b&apos;); end if;end;--输出:a不等于b 上述例子，很显然输出：a不等于b，后面的例子结果如何呢？ 2.&nbsp;例子 1234567891011declarea number(2):= 1;b number(3):= null;begin if a &lt;&gt; b then dbms_output.put_line(&apos;a不等于b&apos;); else dbms_output.put_line(&apos;a等于b&apos;); end if;end;--输出:a等于b 上述例子，竟然出乎意料的输出：a等于b，为什么？其实，任何值与null对比，返回的结果都是null，这就是例子2输出的结果是：a等于b。 3.&nbsp;例子 1234567891011declarea number(2):= 1;b number(3):= null;begin if a is not null and b is not null and a=b then dbms_output.put_line(&apos;a等于b&apos;); else dbms_output.put_line(&apos;a不等于b&apos;); end if;end;--输出:a等于b 上述例子，对于值的比较，是先判断值是否为null，再判断值的大小。这样子才能保证值正确的比较。","categories":[{"name":"数据库","slug":"数据库","permalink":"http://abinnz.com/categories/数据库/"}],"tags":[{"name":"Oracle","slug":"Oracle","permalink":"http://abinnz.com/tags/Oracle/"}]},{"title":"Git常用命令总结","slug":"2016-08-08-git-summary","date":"2016-08-07T16:00:00.000Z","updated":"2018-03-04T03:01:10.181Z","comments":true,"path":"posts/2016-08-08-git-summary/","link":"","permalink":"http://abinnz.com/posts/2016-08-08-git-summary/","excerpt":"这里有一篇关于Git入门的教程，是廖雪峰写的教程，内容通俗易懂。在线Git命令窗口：点击这里在下面我总结一些常用的命令： 1. 常用Git Bash命令 创建目录：mkdir dirName 变更目录：cd dirName 显示路径：pwd 显示内容：ls --all","text":"这里有一篇关于Git入门的教程，是廖雪峰写的教程，内容通俗易懂。在线Git命令窗口：点击这里在下面我总结一些常用的命令： 1. 常用Git Bash命令 创建目录：mkdir dirName 变更目录：cd dirName 显示路径：pwd 显示内容：ls --all 2. Git仓库初始化 初始化前提：cd repName(进入需要创建仓库的目录) 初始化仓库：git init 3. 添加和提交文件 添加文件：git add file 添加所有：git add . 提交更新：git commit -m &quot;some comment&quot; 4. 查看状态和记录 查看状态：git status 历史记录：git log [--graph] 简洁记录：git log --pretty=oneline 提交记录：git reflog 5. 版本回退 回退版本：git reset --hard head^ (N个^代表N个上次版本) 指定版本：git reset --hard commitId 6. 修改控制 查看对比：git diff head -- file 删除文件：git rm file 暂存作业：git stash 查看作业：git stash list 回至作业：git stash pop|apply stash@{0} 撤销修改 修改后 未add（添加到暂存区） 需要撤销修改时：git checkout -- myfile.txt 或 手动删除工作区修改工作区 ： clean 暂存区： clean 修改后 add了（未commit） 再次修改文件 要撤销第二次修改时：git checkout -- myfile.txt (将暂存区恢复到工作区)暂存区有第一次的修改需要commit 修改后 add了（未commit），需要撤销修改时：git reset HEAD myfile.txt (将暂存区修改删除)此时工作区的修改还未撤销git checkout -- myfile.txt (撤销工作区修改) 修改后 add并commit了，需要撤销修改时：git reset --hard HEAD^ (版本回退) 7. 远程仓库操作 SSH-key生成：ssh-keygen -t rsa -C &quot;youremail@domain.com&quot; 添加远程库：git remote add origin repositoryAddress 推送至远程：git push [-u] origin master(分支) 更新本地库：git pull origin master(分支) 克隆远程库：git clone repositoryAddress 查看远程库：git remote -v 8. 分支创建与合并 分支创建：git branch &lt;branch-name&gt; 切换分支：git checkout &lt;branch-name&gt; 创建切换：git checkout -b &lt;branch-name&gt; 查看分支：git branch 合并分支：git merge [--no-ff] [-m &quot;some comment&quot;] &lt;branch-name&gt; 删除分支：git branch -d &lt;branch-name&gt; 9. 标签管理 所有标签：git tag 新建标签：git tag &lt;tag-name&gt; 标签信息：git show &lt;tag-name&gt; 删除标签：git tag -d &lt;tag-name&gt; 远程标签：git push origin :refs/tags/&lt;tagname&gt;(删除) 10. 配置Git全局设定 Git显示颜色：git config --global color.ui true Git用户设定：git config --global user.name userName Git邮箱设定：git config --global user.email userEmail Git别名设定：git config --global alias paragraph","categories":[{"name":"技能","slug":"技能","permalink":"http://abinnz.com/categories/技能/"}],"tags":[{"name":"Git","slug":"Git","permalink":"http://abinnz.com/tags/Git/"}]},{"title":"这是我第一篇博客!","slug":"2016-08-06-first-post","date":"2016-08-05T16:00:00.000Z","updated":"2018-03-04T03:01:43.880Z","comments":true,"path":"posts/2016-08-06-first-post/","link":"","permalink":"http://abinnz.com/posts/2016-08-06-first-post/","excerpt":"记录生活&emsp;&emsp;很久之前，我一直希望能有自己的博客，用来记录关于自己的日志。虽然，我有这样的想法，但是迟迟没行动。可能，认为是时机未成熟，或者是觉得太麻烦，所以拖延了这么长的时间。直到今天，我才开始动手写博客，想用来记录平时遇到的问题，或者分享我认为有趣的东西和好的想法。","text":"记录生活&emsp;&emsp;很久之前，我一直希望能有自己的博客，用来记录关于自己的日志。虽然，我有这样的想法，但是迟迟没行动。可能，认为是时机未成熟，或者是觉得太麻烦，所以拖延了这么长的时间。直到今天，我才开始动手写博客，想用来记录平时遇到的问题，或者分享我认为有趣的东西和好的想法。 &emsp;&emsp;计划永远是唯美，更需要实际行动，比如坚持使用博客写日志和学习总结。所以，我想坚持这个唯美的习惯，写好博客，好写博客。 回顾日志&emsp;&emsp;也许多年以后，当我回望这时记录的日志。可能，在我博客记录的点点滴滴，就是我人生中一份珍贵的记忆、值得怀念的念想。","categories":[{"name":"生活经历","slug":"生活经历","permalink":"http://abinnz.com/categories/生活经历/"}],"tags":[{"name":"记录","slug":"记录","permalink":"http://abinnz.com/tags/记录/"}]}]}